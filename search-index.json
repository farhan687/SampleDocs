[{"content":"<h1 id=\"how-to\">How to</h1>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"HOW TO"},{"content":"<h2 id=\"how-to-unsubscribe-from-a-streaming-query\">Unsubscribe from a streaming query</h2><p>The JS API methods for the <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-setup-new-appbase\"><code>appbaseRef</code></a> object implement a <strong>streams</strong> interface. Let’s see an example:</p><p>Unsubscribing from the <code>responseStream</code> is simple: using <code>stop()</code> method.</p><p><span class=\"fa fa-info-circle\"></span> The same is true for all other methods (like <code>index()</code>, <code>getStream()</code>) as well, data is returned asynchronously via the ‘data’ event handler.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"UNSUBSCRIBE FROM A STREAMING QUERY"},{"content":"<h2 id=\"how-to-pause-a-streaming-query\">Pause a streaming query</h2><p><a href=\"https://nodejs.org/api/stream.html#stream_readable_pause\">Pausing a response stream object</a> prevents new data responses from emitting. The stream can be resumed again via conveniently named <code>responseStream.resume()</code>.</p><p><span class=\"fa fa-info-circle\"></span> <strong>pause()</strong> vs <strong>stop()</strong> - pause() merely prevents emitting new responses in the ‘data’ event handler, all the response stream object buffers the new events emitted by the <code>searchStream()</code> method. When resume() is called, all these responses are returned by the ‘data’ event handler. </p><p>By contrast, <code>stop()</code> unsubscribes from the query and kills the response stream object.</p><p><span class=\"fa fa-star\"></span> Check out more things you can do with streams here -  <a href=\"http://www.sitepoint.com/basics-node-js-streams/\">http://www.sitepoint.com/basics-node-js-streams/</a>.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"PAUSE A STREAMING QUERY"},{"content":"<h2 id=\"how-to-stream-results-of-a-range-query\">Stream results of a range query</h2><p>Appbase.io implements a streaming interface for the entire <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl.html\">Query DSL</a> supported by ElasticSearch. So if we can compose a range query, making it return continuous results is easy.</p><p>Let’s say we have a <strong>type</strong> called <em>items</em> which contains items with their corresponding value. An example document inside the <em>items</em> type looks like:</p><p>Composing the query:</p><p>The default state of <code>responseStream</code> object is paused. As soon as attach a data handler to it, it will start streaming the responses.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"STREAM RESULTS OF A RANGE QUERY"},{"content":"<h2 id=\"how-to-change-the-default-results-in-a-search-query\">Change the default results in a search query</h2><p>Appbase returns 10 objects in the initial response to <code>searchStream()</code> method. Sometimes, we need to return more objects. We can do this by specifying the <code>size</code> attribute inside our query like this:</p><p>The <code>responseStream</code> object will now return max(total_objects_matching_our_query, 100) objects on the <code>'data'</code> event handler.</p><p><span class=\"fa fa-star\"></span> The <code>size</code> attribute can specify a maximum of 1000 objects to return in one response.</p><p><span class=\"fa fa-info-circle\"></span> <code>size</code> attribute can be applied on both <code>searchStream()</code> and <code>search()</code> methods.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"CHANGE THE DEFAULT RESULTS IN A SEARCH QUERY"}]