[{"content":"<h1 id=\"how-to\">How to</h1>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"HOW TO"},{"content":"<h2 id=\"how-to-update-mapping-without-losing-data\">Update mapping without losing data</h2><p>Although you can add new types to an index, or add new fields to a type, you can’t add new analyzers or make changes to existing fields. If you were to do so, the data that had already been indexed would be incorrect and your searches would no longer work as expected. Here’s a short gist on how mappings work:</p><p>In order to make your data searchable, your database needs to know what type of data each field contains and how it should be indexed. If you switch a field type from e.g. a string to a date, all of the data for that field that you already have indexed cannot be used because of the datatype mismatch. In such situations, you need to reindex that field.</p><p>This applies not just to Appbase (or Elasticsearch / Lucene - the datastore used by Appbase), but to any database that uses indices for searching. And if it isn’t using indices then it is sacrificing speed for flexibility.</p><p>There is one situation where re-indexing is not required: when adding a field, as a previous mapping for the field didn’t exist and Appbase can infer the field datatype when it’s indexed for the first time.</p><p>Since updating mapping =&gt; reindexing data, let’s take a look at that.</p>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"UPDATE MAPPING WITHOUT LOSING DATA"},{"content":"<h3 id=\"how-to-update-mapping-without-losing-data-reindexing-your-data\">Reindexing your data</h3><p>The process for reindexing your data is quite simple. First, create a new app in appbase and update the new mapping and settings:  </p><p>One of the advantages of the _source field is that you already have the whole document available to you in Elasticsearch itself. You don’t have to rebuild your index from the database, which is usually much slower.</p><p>To reindex all of the documents from the old index efficiently, use <a href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html\">scan-and-scroll</a> to retrieve batches of documents from the old index, and the <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-writing-data-bulk\">bulk API</a> to push them into the new index.</p>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"Reindexing your data"},{"content":"<h3 id=\"how-to-update-mapping-without-losing-data-reindexing-in-batches\">Reindexing in Batches</h3><p>You can run multiple reindexing jobs at the same time, but you obviously don’t want their results to overlap. Instead, break a big reindex down into smaller jobs by filtering on a date or timestamp field:  </p><p>If you continue making changes to the old app, you will want to make sure that you include the newly added documents in your new app as well. This can be done by rerunning the reindex process, but again filtering on a date field to match only documents that have been added since the last reindex process started.</p><p>Reference: <a href=\"https://www.elastic.co/blog/changing-mapping-with-zero-downtime\">Elastic Search blog</a></p>","link":"./scalr/FAQs/rest.html","spaLink":"#/scalr/FAQs/rest","title":"Reindexing in Batches"},{"content":"<h1 id=\"how-to\">How to</h1>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"HOW TO"},{"content":"<h2 id=\"how-to-unsubscribe-from-a-streaming-query\">Unsubscribe from a streaming query</h2><p>The JS API methods for the <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-setup-new-appbase\"><code>appbaseRef</code></a> object implement a <strong>streams</strong> interface. Let’s see an example:</p><p>Unsubscribing from the <code>responseStream</code> is simple: using <code>stop()</code> method.</p><p><span class=\"fa fa-info-circle\"></span> The same is true for all other methods (like <code>index()</code>, <code>getStream()</code>) as well, data is returned asynchronously via the ‘data’ event handler.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"UNSUBSCRIBE FROM A STREAMING QUERY"},{"content":"<h2 id=\"how-to-pause-a-streaming-query\">Pause a streaming query</h2><p><a href=\"https://nodejs.org/api/stream.html#stream_readable_pause\">Pausing a response stream object</a> prevents new data responses from emitting. The stream can be resumed again via conveniently named <code>responseStream.resume()</code>.</p><p><span class=\"fa fa-info-circle\"></span> <strong>pause()</strong> vs <strong>stop()</strong> - pause() merely prevents emitting new responses in the ‘data’ event handler, all the response stream object buffers the new events emitted by the <code>searchStream()</code> method. When resume() is called, all these responses are returned by the ‘data’ event handler. </p><p>By contrast, <code>stop()</code> unsubscribes from the query and kills the response stream object.</p><p><span class=\"fa fa-star\"></span> Check out more things you can do with streams here -  <a href=\"http://www.sitepoint.com/basics-node-js-streams/\">http://www.sitepoint.com/basics-node-js-streams/</a>.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"PAUSE A STREAMING QUERY"},{"content":"<h2 id=\"how-to-stream-results-of-a-range-query\">Stream results of a range query</h2><p>Appbase.io implements a streaming interface for the entire <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/1.7/query-dsl.html\">Query DSL</a> supported by ElasticSearch. So if we can compose a range query, making it return continuous results is easy.</p><p>Let’s say we have a <strong>type</strong> called <em>items</em> which contains items with their corresponding value. An example document inside the <em>items</em> type looks like:</p><p>Composing the query:</p><p>The default state of <code>responseStream</code> object is paused. As soon as attach a data handler to it, it will start streaming the responses.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"STREAM RESULTS OF A RANGE QUERY"},{"content":"<h2 id=\"how-to-change-the-default-results-in-a-search-query\">Change the default results in a search query</h2><p>Appbase returns 10 objects in the initial response to <code>searchStream()</code> method. Sometimes, we need to return more objects. We can do this by specifying the <code>size</code> attribute inside our query like this:</p><p>The <code>responseStream</code> object will now return max(total_objects_matching_our_query, 100) objects on the <code>'data'</code> event handler.</p><p><span class=\"fa fa-star\"></span> The <code>size</code> attribute can specify a maximum of 1000 objects to return in one response.</p><p><span class=\"fa fa-info-circle\"></span> <code>size</code> attribute can be applied on both <code>searchStream()</code> and <code>search()</code> methods.</p>","link":"./scalr/FAQs/jsapi.html","spaLink":"#/scalr/FAQs/jsapi","title":"CHANGE THE DEFAULT RESULTS IN A SEARCH QUERY"},{"content":"<h1 id=\"api-prime-objective-scale\"><img src=\"http://i.imgur.com/Eppz2lz.png?1\" alt=\"SCALR\"> API Prime Objective: Scale</h1><p>As the name suggests, our prime focus with this iteration of the API has been achieving a massive scale of API operations, to the tune of <a href=\"http://news.appbase.io/scaling-elasticsearch-writes/\">100,000 writes</a> and reads (yet to corroborate) per second. </p><p>You might wonder - why is addressing scale so important? A typical successful application would never exceed a throughput of a  few hundred requests per second and generally be okay with serving responses in time.</p><p>So much complexity in software comes from trying to make one thing do two things.<br>-Ryan Singer</p><p>This quote from Ryan Singer especially sings true when one thinks of scaling database operations. So much of the software service complexities stem from keeping up with the infrastructure needs, that those end up turning into burning pain points. It should come as no surprise that most mainstream distributed systems were born out of the scaling pain points faced by the 0.01% of applications.</p><p>Not only does addressing scale solve the burning pain points faced by the 0.01%, it provides confidence around the edge-cases and leads to faster adoption in production environments and success stories. We hope all of these come true for SCALR. In building SCALR, focusing on scale has lead us to a better foundational design, a more rigorously tested codebase, and a fine-grained monitoring of our deployment infrastructure. We’ll go more in depth about these learnings over the next few months, but most importantly - for the 99.9% folks reading this, <code>SCALR</code> has tons of improvements and features over <code>v2</code>.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":" API PRIME OBJECTIVE: SCALE"},{"content":"<h1 id=\"git-diff-changes-human\">git diff changes - -  human</h1><p>Welcome to the land of SCALR, where everyone smiles and the sun shines bright. </p><p><img src=\"http://i.imgur.com/3nYaIQM.png?1\" alt=\"SCALR banner image\"></p><p>Our beloved Hobo Lobo is chalking a ‘SCALR’ 101. </p><p>“changes what?”, asks someone.<br>“Everything”, says Hobo Lobo rather curtly.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"GIT DIFF CHANGES - - HUMAN"},{"content":"<h2 id=\"git-diff-changes-human-scalr-whats-in-a-name\"><code>SCALR</code> - What’s in a name</h2><p>The most tangible change is in the codename - <code>scalr</code>. Breaking the convention of keeping a dull version name like <code>v2.0</code>, we will go with the version <code>scalr</code>. Docs for scalr are available at <a href=\"\">http://docs.appbase.io/</a> and the API base URL would be <code>https://scalr.api.appbase.io</code>.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"SCALR - WHAT’S IN A NAME"},{"content":"<h2 id=\"git-diff-changes-human-compatibility-with-elasticsearch\">Compatibility with ElasticSearch</h2><p><code>scalr</code> is compatible out of the box with the ElasticSearch APIs. This means our users can take advantage of the vast plethora of client libraries made available by the folks at Elastic, have access to a vibrant open-source community and have the freedom to import / export data from Appbase.io conveniently. </p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"COMPATIBILITY WITH ELASTICSEARCH"},{"content":"<h3 id=\"git-diff-changes-human-compatibility-with-elasticsearch-http-basic-authentication\">HTTP Basic Authentication</h3><p><code>scalr</code> uses HTTP Basic Authentication for securing app access (similar to Github and Wordpress’s authentication mechanisms). Every Appbase app can have one or more access tokens (username, password) with differing read and write permissions to allow fine-grained access. ElasticSearch’s access tokens work in the same way, a major compatibility win.</p><p>Note: This is a change from the earlier use of authentication header called <code>Appbase-Secret</code>.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"HTTP Basic Authentication"},{"content":"<h3 id=\"git-diff-changes-human-compatibility-with-elasticsearch-whats-not-compatible\">What’s not compatible?</h3><p>The APIs related to devops, like clusters, multi-index operations, index creation are not a part of Appbase.io. Appbase is opinionated about devops.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"What’s not compatible?"},{"content":"<h2 id=\"git-diff-changes-human-data-streams-20\">Data Streams 2.0</h2><p>Data Streams aka realtime events are rethought in <code>SCALR</code>. Instead of being a websockets based extension of the API to track just the document and reference changes, data streams are deeply baked into the <code>SCALR</code> API. Data Streams are implemented over both <strong>websockets</strong> (for browsers) and <strong>http-streaming</strong> (for other runtimes) and are pervasive over web, mobile and language native libraries. Data Streams can stream results of queries and filters as new data comes into the system.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"DATA STREAMS 2.0"},{"content":"<h2 id=\"git-diff-changes-human-adieu-to-graph-datamodel\">Adieu to Graph datamodel</h2><p><code>SCALR</code> the JSON based schema-free datamodel of ElasticSearch. This is a major change over the graph datamodel extensively used by the <code>v2</code> API. The move is aimed at simplicity and to provide a less opinionated data model. True graph relationships can still be modeled in <code>SCALR</code>.</p>","link":"./scalr/concepts/intro.html","spaLink":"#/scalr/concepts/intro","title":"ADIEU TO GRAPH DATAMODEL"},{"content":"<h1 id=\"appbase-data-model\">Appbase Data Model</h1>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"APPBASE DATA MODEL"},{"content":"<h2 id=\"appbase-data-model-what-is-appbaseio\">What is appbase.io</h2><p><a href=\"https://appbase.io\">Appbase.io</a> is a data streams API service for continuous search and aggregation queries. You can build reactive apps with Appbase.io, where views update in conjunction with the data changes.</p><p>It enables you to:  </p><ul>\n<li>Build a blazing fast text search, messaging systems, or implement a mix of esoteric filters (fuzzy, geo, terms, range, multiple items),</li>\n<li>Stream JSON results directly as new data is added or the original data is updated,  </li>\n<li>Scale seamlessly upto 10,000 updates per second and store at terbyte scale.</li>\n</ul><p><img src=\"http://i.imgur.com/iJpqtks.png?1\" alt=\"Appbase Architecture\"><br><strong>Image 1:</strong> It provides a reliable data streams API as a service, while leveraging ElasticSearch (and Lucene) for storage and search.</p><p>While not primarily intended, Appbase.io can also be used as a hosted ElasticSearch API or as a message queue with a publish / subscribe model.</p><p>There are some catches if you intend to:  </p><ul>\n<li>Use it as a primary data store - ElasticSearch is <a href=\"https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html#_loss_of_documents_during_network_partition_status_ongoing\">known to lose data</a> for some time on network partitions.<br><code>Status:</code> We are working towards adding support for durability by using Apache Kafka as a frontend (things you can do in SaaS!).</li>\n<li>Model financial or sensitive data - Appbase.io is not ACIDic and we don’t intend to be. A good design choice in this situation would be to use something that supports ACID transactions for storing sensitive data, and use Appbase.io for the data that needs to be searchable or accessed in realtime.</li>\n<li>Use it for OLAP use-cases - Appbase.io is designed as an OLTP system although it supports aggregations and queries on data sets of the size of terabytes. There are plenty of ideal tools for OLAP use-cases - Amazon Redshift, Google Big Query, Apache Hadoop and Appbase.io can be used with any of them (via REST API).</li>\n</ul>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"WHAT IS APPBASE.IO"},{"content":"<h1 id=\"appbase-data-schema\">Appbase Data Schema</h1><p>Appbase uses the same data schema as ElasticSearch.</p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"APPBASE DATA SCHEMA"},{"content":"<h2 id=\"appbase-data-schema-app-aka-index\">App <span style=\"font-weight: 200;\">aka Index</span></h2><p>An app in <a href=\"https://appbase.io\">appbase.io</a> is stored as an index in ElasticSearch. App is the highest level of construct supported by appbase and is equivalent to a <strong>database</strong> in SQL.</p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"APP AKA INDEX"},{"content":"<h2 id=\"appbase-data-schema-type\">Type</h2><p>Types are equivalent to <strong>tables</strong> in SQL. Data in an app is always stored within it’s types. A good way to think of them is as collections of different kinds of data.</p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"TYPE"},{"content":"<h2 id=\"appbase-data-schema-document\">Document</h2><p>A <strong>document</strong> is the actual data stored in Appbase. Documents are <code>JSON</code> objects, equivalent to <strong>records</strong> or <strong>rows</strong> in SQL.</p><p><br></p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"DOCUMENT"},{"content":"<h2 id=\"appbase-data-schema-visualizing-the-data-model\">Visualizing the Data Model</h2><p>An app can have one or more types and each type is a container for JSON documents. Visually, the arrangement looks like below:</p><p><img src=\"https://farm1.staticflickr.com/616/21319701888_dbe75d9f6f_c.jpg\" alt=\"img\"></p>","link":"./scalr/concepts/datamodel.html","spaLink":"#/scalr/concepts/datamodel","title":"VISUALIZING THE DATA MODEL"},{"content":"<h1 id=\"golang-api-reference\">GOLANG API REFERENCE</h1><p><a href=\"https://github.com/appbaseio/go-appbase\">go-appbase</a> is a data streams library for Go.</p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over http-streams.  </li>\n<li>Index new documents and update existing ones.  </li>\n<li>Is compatible with <a href=\"https://github.com/olivere/elastic\">Elasticsearch’s Go Client</a> maintained by Olivere. </li>\n</ul><p>You can read the quick start guide for installation and basic usage. You can also read the API doc from godoc directly <a href=\"https://godoc.org/github.com/appbaseio/go-appbase\">here</a>.</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"GOLANG API REFERENCE"},{"content":"<h2 id=\"golang-api-reference-setup\">SETUP</h2>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"SETUP"},{"content":"<h3 id=\"golang-api-reference-setup-newclient\">NewClient</h3><p><strong>Usage</strong></p><p><code>func NewClient(URL string, username string, password string, appname string) (*Client, error)</code>  </p><ul>\n<li><strong>URL</strong> <code>string</code>- URL with the API version, always <em><a href=\"https://scalr.api.appbase.io\">https://scalr.api.appbase.io</a></em> </li>\n<li><strong>username</strong> <code>string</code> - username for the app as displayed in the dashboard</li>\n<li><strong>password</strong> <code>string</code> - password for the app as displayed in the dashboard</li>\n<li><strong>appname</strong> <code>string</code> - name of the app as displayed in the <a href=\"https://appbase.io/scalr\">dashboard</a></li>\n</ul><p><strong>Returns</strong></p><p>Returns a <strong>Client</strong> struct which has - <code>Ping()</code>, <code>Index()</code>, <code>Get()</code>, <code>GetStream()</code>, <code>Update()</code>, <code>Delete()</code>, <code>Search()</code>, <code>SearchStream()</code>, and <code>SearchStreamToURL()</code>.</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"NewClient"},{"content":"<h3 id=\"golang-api-reference-setup-delete\">Delete</h3><p>Delete returns a DeleteService which is used to delete a document</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"Delete"},{"content":"<h3 id=\"golang-api-reference-setup-get\">Get</h3><p>Get returns a GetService which is used to retrieve a document</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"Get"},{"content":"<h3 id=\"golang-api-reference-setup-getstream\">GetStream</h3><p>GetStream is used to start a stream of updates corresponding to a document</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"GetStream"},{"content":"<h3 id=\"golang-api-reference-setup-index\">Index</h3><p>Index returns an IndexService which is used to index a document</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"Index"},{"content":"<h3 id=\"golang-api-reference-setup-ping\">Ping</h3>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"Ping"},{"content":"<h3 id=\"golang-api-reference-setup-search\">Search</h3><p>Search provides access to Elasticsearch’s search functionality</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"Search"},{"content":"<h3 id=\"golang-api-reference-setup-searchstream\">SearchStream</h3><p>SearchStream is used to get updates corresponding to a query</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"SearchStream"},{"content":"<h3 id=\"golang-api-reference-setup-searchstreamtourl\">SearchStreamToURL</h3><p>SearchStream is used to send updates corresponding to a query to an URL</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"SearchStreamToURL"},{"content":"<h3 id=\"golang-api-reference-setup-update\">Update</h3><p>Update returns an UpdateService which is used to update a document</p>","link":"./scalr/golang/api-reference.html","spaLink":"#/scalr/golang/api-reference","title":"Update"},{"content":"<h1 id=\"javascript-api-reference\">Javascript API Reference</h1><p>Appbase.JS is a minimalistic library for data streams.</p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over websockets (for browsers) and http-streams.</li>\n<li>Index new documents or update / delete existing ones.</li>\n<li>Is compatible with <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a>, which can be used for modifying the ES configurations and for using more esoteric methods.</li>\n</ul><p>You can read the <a href=\"http://docs.appbase.io/scalr/javascript/javascript-intro.html\">Javascript</a> or <a href=\"http://docs.appbase.io/scalr/javascript/nodejs-intro.html\">Node.JS</a> quick-start guides for installation and basic usage.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"JAVASCRIPT API REFERENCE"},{"content":"<h2 id=\"javascript-api-reference-setup\">SETUP</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"SETUP"},{"content":"<h3 id=\"javascript-api-reference-setup-new-appbase\">new Appbase()</h3><p>Returns a new Appbase object (refered to as <code>appbaseRef</code> in all the following examples) using the <code>url</code>, <code>appname</code> and <code>username</code>:<code>password</code> credentials.</p><p><strong>Usage</strong></p><p><code>new Appbase(appData)</code></p><ul>\n<li><p><strong>appData</strong> <code>Object</code> - A Javascript object containing the following fields and values</p>\n<ul>\n<li><strong>url</strong> <code>String</code> - URL with the API version, always <em><a href=\"https://scalr.api.appbase.io\">https://scalr.api.appbase.io</a></em></li>\n<li><strong>appname</strong> <code>String</code> - name of the app as displayed in the <a href=\"https://appbase.io/scalr\">dashboard</a></li>\n<li><strong>username</strong> <code>String</code> - username as displayed in the app dashboard</li>\n<li><strong>password</strong> <code>String</code> - password as displayed in the app dashboard</li>\n</ul>\n</li>\n</ul><p><strong>appData</strong> <code>Object</code> - A Javascript object containing the following fields and values</p><ul>\n<li><strong>url</strong> <code>String</code> - URL with the API version, always <em><a href=\"https://scalr.api.appbase.io\">https://scalr.api.appbase.io</a></em></li>\n<li><strong>appname</strong> <code>String</code> - name of the app as displayed in the <a href=\"https://appbase.io/scalr\">dashboard</a></li>\n<li><strong>username</strong> <code>String</code> - username as displayed in the app dashboard</li>\n<li><strong>password</strong> <code>String</code> - password as displayed in the app dashboard</li>\n</ul><p><strong>Returns</strong></p><p><code>Object</code> <strong>appbaseRef</strong> <em>Appbase reference object</em> - has <code>index()</code>, <code>update()</code>, <code>delete()</code>, <code>bulk()</code>, <code>search()</code>, <code>get()</code>, <code>getTypes()</code>, <code>getStream()</code>, <code>searchStream()</code> and <code>searchStreamToURL()</code> methods.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"new Appbase()"},{"content":"<h2 id=\"javascript-api-reference-writing-data\">WRITING DATA</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"WRITING DATA"},{"content":"<h3 id=\"javascript-api-reference-writing-data-index\">index()</h3><p>Writes a JSON data object at a given <code>type</code> and <code>id</code> location, or replaces if an object already exists.</p><p><strong>Usage</strong></p><p><code>appbaseRef.index(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the type, id and the JSON data to be indexed</p>\n<ul>\n<li><strong>type</strong> <code>String</code> - The type (aka collection) under which the data will be indexed</li>\n<li><strong>body</strong> <code>Object</code> - Data to be indexed, a valid JSON object</li>\n<li><strong>id</strong> <code>String</code> - Unique ID for the JSON data. <code>id</code> is auto generated if not specified</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the type, id and the JSON data to be indexed</p><ul>\n<li><strong>type</strong> <code>String</code> - The type (aka collection) under which the data will be indexed</li>\n<li><strong>body</strong> <code>Object</code> - Data to be indexed, a valid JSON object</li>\n<li><strong>id</strong> <code>String</code> - Unique ID for the JSON data. <code>id</code> is auto generated if not specified</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"index()"},{"content":"<h3 id=\"javascript-api-reference-writing-data-update\">update()</h3><p>Partially updates an existing document at a given <code>type</code> and <code>id</code> location. The important difference with the index() method is that the latter replaces the existing data values wholesale, while update() only replaces the values that are specified in the <code>body.doc</code> field.</p><p><strong>Usage</strong></p><p><code>appbaseRef.update(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the type, id, and the partial JSON data to be updated</p>\n<ul>\n<li><strong>type</strong> <code>String</code> - The type (aka collection) under which the data will be indexed</li>\n<li><strong>body.doc</strong> <code>Object</code> - Partial doc JSON to be updated (all the JSON data can only reside under the body.doc field)</li>\n<li><strong>id</strong> <code>String</code> - Unique ID of the JSON document to be updated. <code>id</code> here is mandatory and should match an existing object.</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the type, id, and the partial JSON data to be updated</p><ul>\n<li><strong>type</strong> <code>String</code> - The type (aka collection) under which the data will be indexed</li>\n<li><strong>body.doc</strong> <code>Object</code> - Partial doc JSON to be updated (all the JSON data can only reside under the body.doc field)</li>\n<li><strong>id</strong> <code>String</code> - Unique ID of the JSON document to be updated. <code>id</code> here is mandatory and should match an existing object.</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"update()"},{"content":"<h3 id=\"javascript-api-reference-writing-data-delete\">delete()</h3><p>Delete a JSON data object by <code>id</code>.</p><p><strong>Usage</strong></p><p><code>appbaseRef.delete(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>type</code> and <code>id</code> of the JSON object to be deleted</p>\n<ul>\n<li><strong>type</strong> <code>String</code> - The type (aka collection) of the object to be deleted</li>\n<li><strong>id</strong> <code>String</code> - Unique ID for the JSON data</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>type</code> and <code>id</code> of the JSON object to be deleted</p><ul>\n<li><strong>type</strong> <code>String</code> - The type (aka collection) of the object to be deleted</li>\n<li><strong>id</strong> <code>String</code> - Unique ID for the JSON data</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"delete()"},{"content":"<h3 id=\"javascript-api-reference-writing-data-bulk\">bulk()</h3><p>Apply many index / delete operations together, useful when importing data for the first time.</p><p><strong>Usage</strong></p><p><code>appbaseRef.bulk(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>body</code> and optionally a default <code>type</code> to be used for actions</p>\n<ul>\n<li><strong>body</strong> <code>String</code> - A Javascript array of actions to be performed written as a sequence of action#1, data#1, action#2, data#2, … action#n, data#n</li>\n<li><strong>type</strong> <code>String</code> - Default document type for actions that don’t provide one</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>body</code> and optionally a default <code>type</code> to be used for actions</p><ul>\n<li><strong>body</strong> <code>String</code> - A Javascript array of actions to be performed written as a sequence of action#1, data#1, action#2, data#2, … action#n, data#n</li>\n<li><strong>type</strong> <code>String</code> - Default document type for actions that don’t provide one</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"bulk()"},{"content":"<h2 id=\"javascript-api-reference-getting-data\">GETTING DATA</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"GETTING DATA"},{"content":"<h3 id=\"javascript-api-reference-getting-data-get\">get()</h3><p>Get the JSON document from a particular <code>type</code> and <code>id</code>. For subscribing to realtime updates on a document, check out <code>getStream()</code>.</p><p><strong>Usage</strong></p><p><code>appbaseRef.get(params)</code></p><ul>\n<li><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>type</code> and <code>id</code> of the document to retrieve.  <ul>\n<li><strong>type</strong> <code>String</code> - Document Type</li>\n<li><strong>id</strong> <code>String</code> - Unique ID of the JSON document</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>type</strong> <code>String</code> - Document Type</li>\n<li><strong>id</strong> <code>String</code> - Unique ID of the JSON document</li>\n</ul><p>Returns the document at the given <code>type</code> and <code>id</code>.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"get()"},{"content":"<h3 id=\"javascript-api-reference-getting-data-gettypes\">getTypes()</h3><p>Get all the <code>types</code> of an appname.</p><p><strong>Usage</strong></p><p><code>appbaseRef.getTypes()</code></p><p>Returns all the <code>types</code> as an array.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"getTypes()"},{"content":"<h3 id=\"javascript-api-reference-getting-data-search\">search()</h3><p>Search for matching documents in a type. It’s a convenience method for ElasticSearch’s <code>/_search</code> endpoint.  For subscribing to realtime updates on the search query, check out <code>searchStream()</code>.</p><p><strong>Usage</strong></p><p><code>appbaseRef.search(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the query <code>type</code> and <code>body</code>.</p>\n<ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>body</strong> <code>String</code> - A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the query <code>type</code> and <code>body</code>.</p><ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>body</strong> <code>String</code> - A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code>Object</code> with</p><ul>\n<li><code>'data'</code> and <code>'error'</code> event handlers to return the results and any errors.</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"search()"},{"content":"<h2 id=\"javascript-api-reference-streaming-data\">STREAMING DATA</h2>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"STREAMING DATA"},{"content":"<h3 id=\"javascript-api-reference-streaming-data-getstream\">getStream()</h3><p>Continuously stream new updates to a specific JSON document. If you wish to only fetch the existing value, <code>get()</code> is sufficient.</p><p><strong>Usage</strong></p><p><code>appbaseRef.getStream(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>type</code> and <code>id</code> of the document to be streamed.</p>\n<ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>id</strong> <code>String</code> - Document ID (The ID is always a <code>String</code> value)</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the <code>type</code> and <code>id</code> of the document to be streamed.</p><ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>id</strong> <code>String</code> - Document ID (The ID is always a <code>String</code> value)</li>\n</ul><p><span class=\"fa fa-info-circle\"></span> The <code>streamOnly</code> field parameter is deprecated starting v0.9.0 onwards, and is the default for how <code>getStream()</code> works (previously <code>readStream()</code>).</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code>Object</code> with</p><ul>\n<li><code>'data'</code> and <code>'error'</code> event handlers</li>\n<li>a <strong>stop()</strong> method to stop the stream</li>\n</ul><p><code>Note:</code> appbase.js lib uses websockets to stream the updates.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"getStream()"},{"content":"<h3 id=\"javascript-api-reference-streaming-data-searchstream\">searchStream()</h3><p>Continuously stream results of search query on a given <code>type</code>. Search queries can be a variety of things: from simple monitoring queries, finding an exact set of documents, full-text search queries, to geolocation queries.</p><p><code>searchStream()</code> subscribes to search results on new document inserts, existing search results can be fetched via <code>search()</code> method.</p><p><strong>Usage</strong></p><p><code>appbaseRef.searchStream(params)</code></p><ul>\n<li><p><strong>params</strong> <code>Object</code> - A Javascript object containing the query <code>type</code> and <code>body</code></p>\n<ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>body</strong> <code>String</code> - A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul>\n</li>\n</ul><p><strong>params</strong> <code>Object</code> - A Javascript object containing the query <code>type</code> and <code>body</code></p><ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>body</strong> <code>String</code> - A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul><p><span class=\"fa fa-info-circle\"></span> The <code>streamOnly</code> field parameter is deprecated starting v0.9.0 onwards, and is the default for how <code>searchStream()</code> works.</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code>Object</code> with</p><ul>\n<li><code>'data'</code> and <code>'error'</code> event handlers</li>\n<li>a <strong>stop()</strong> method to stop the stream</li>\n</ul>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"searchStream()"},{"content":"<h3 id=\"javascript-api-reference-streaming-data-searchstreamtourl\">searchStreamToURL()</h3><p>Continuously stream results of search query on a given <code>type</code> to a URL. <strong>searchStreamToURL()</strong> executes a webhook query on document insertion.</p><p><code>searchStreamToURL()</code> subscribes to search query results on new document inserts.</p><p><strong>Usage</strong></p><p><code>appbaseRef.searchStreamToURL(queryParams, urlParams)</code></p><ul>\n<li><p><strong>queryParams</strong> <code>Object</code> - A Javascript object containing the query <code>type</code> and <code>body</code></p>\n<ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>body</strong> <code>String</code> - A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul>\n</li>\n<li><p><strong>urlParams</strong> <code>Object</code> - A Javascript object containing the <code>url</code> to which data would be streamed on a query match. It supports optional fields to attach JSON (or string) payloads, control the frequency and number of updates.</p>\n<ul>\n<li><strong>url</strong> <code>String</code> - A URL string</li>\n<li><strong>body</strong> <code>Object</code> - A JSON object to be sent to the URL (used as an alternative to <strong>string_body</strong>)</li>\n<li><strong>string_body</strong> <code>String</code> - A raw string to be sent to the URL (used as an alternative to <strong>body</strong>)</li>\n<li><strong>count</strong> <code>Number</code> - # of times the result-request should be sent before terminating the webhook</li>\n<li><strong>interval</strong> <code>Number</code> - Wait duration in seconds before the next result-request</li>\n</ul>\n</li>\n</ul><p><strong>queryParams</strong> <code>Object</code> - A Javascript object containing the query <code>type</code> and <code>body</code></p><ul>\n<li><strong>type</strong> <code>String</code> - Document type</li>\n<li><strong>body</strong> <code>String</code> - A JSON object specifying a valid query in the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">ElasticSearch Query DSL</a> format</li>\n</ul><p><strong>urlParams</strong> <code>Object</code> - A Javascript object containing the <code>url</code> to which data would be streamed on a query match. It supports optional fields to attach JSON (or string) payloads, control the frequency and number of updates.</p><ul>\n<li><strong>url</strong> <code>String</code> - A URL string</li>\n<li><strong>body</strong> <code>Object</code> - A JSON object to be sent to the URL (used as an alternative to <strong>string_body</strong>)</li>\n<li><strong>string_body</strong> <code>String</code> - A raw string to be sent to the URL (used as an alternative to <strong>body</strong>)</li>\n<li><strong>count</strong> <code>Number</code> - # of times the result-request should be sent before terminating the webhook</li>\n<li><strong>interval</strong> <code>Number</code> - Wait duration in seconds before the next result-request</li>\n</ul><p><span class=\"fa fa-star\"></span> <strong>body</strong> and <strong>string_body</strong> fields support <a href=\"http://mustache.github.io/mustache.5.html\">mustache syntax</a> for accessing values inside the matching result object.</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code>Object</code> with</p><ul>\n<li><code>'data'</code> and <code>'error'</code> event handlers</li>\n<li>a <strong>change()</strong> method to replace the destination URL object</li>\n<li>a <strong>stop()</strong> method to de-register the webhook</li>\n</ul><p><span class=\"fa fa-info-circle\"></span> We recommend using both <strong>change()</strong> and <strong>stop()</strong> methods inside the <code>data</code> or <code>error</code> event handlers due to the async nature of the <code>searchStreamToURL()</code> method.</p>","link":"./scalr/javascript/api-reference.html","spaLink":"#/scalr/javascript/api-reference","title":"searchStreamToURL()"},{"content":"<h1 id=\"quick-start-to-the-js-api\">Quick Start to the <img src=\"http://i.imgur.com/Eppz2lz.png?1\" alt=\"Scalr\"> JS API</h1><p><a href=\"https://github.com/appbaseio/appbase-js\">Appbase.JS</a> is a minimalistic library for data streams.  </p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over <code>websockets</code>.</li>\n<li>Index new documents or update / delete existing ones.</li>\n</ul><p>It can’t:  </p><ul>\n<li>Configure mappings, change analyzers, or capture snapshots. All these are provided by <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a> - the official ElasticSearch JS client library.</li>\n</ul><p><a href=\"https://appbase.io\">Appbase</a> is opinionated about the cluster setup and doesn’t support the ElasticSearch devops APIs.</p><p>This is a quick start guide to whet the appetite with the possibilities of data streams.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"QUICK START TO THE  JS API"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"http://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for a simple username/password authentication.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-1-lib-setup\">Step 1: Lib Setup</h2><p>We will fetch and install the <strong>appbase-js</strong> lib using <a href=\"http://bower.io\">bower</a>. We will use <code>v0.10.1</code> for specificity. </p><p>Requiring the lib takes just one line of html script injection:</p><p>To write data or stream updates from <a href=\"https://appbase.io\">appbase.io</a>, we need to first create a reference object. We do this by passing the API URL, appname, and a username:password combination into the <code>Appbase</code> constructor:</p><p><strong>OR</strong></p><p>Alternatively, username:password can be passed as a part of the API URL in the constructor.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 1: LIB SETUP"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-2-storing-data\">Step 2: Storing Data</h2><p>Once we have the reference object (called <code>appbaseRef</code> in this tutorial), we can insert any JSON object into it with the <code>index()</code> method.</p><p>where <code>type: 'books'</code> indicate the collection (or table) inside which the data will be stored and the<code>id: '1'</code> is an optional unique identifier.</p><p>The <code>index()</code> method (and all the other <code>appbase</code> methods) return a <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream</a> object. A ‘data’ event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.</p><p><span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a <em>collection in MongoDB</em> or a <em>table in SQL</em>, and a document is similar to the document in MongoDB and equivalent to a <em>row in SQL</em>.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 2: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data\">Step 3: <s>GETing</s> vs Streaming Data</h2><p>Unlike typical databases that support GET operations (or Read) for fetching data and queries, Appbase.io operates on both GET and stream modes. We will first apply the GET mode to read our just inserted object.</p><p>Now that we are able to store data, let’s try to get the data back from <a href=\"https://appbase.io\">appbase.io</a> with the <code>get()</code> method.</p><p>Even though <code>get()</code> returns a single document data, appbase.io returns it as a stream object with the ‘data’ event handler.</p><p>Let’s say that we are interested in subscribing to all the state changes that happen on a document. Here, we would use the <code>getStream()</code> method over <code>get()</code>, which keeps returning new changes made to the document.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 3: GETING VS STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data-3a-subscribing-to-document-stream\">3.a: Subscribing to document stream</h3><p>Don’t be surprised if you don’t see anything printed, <code>getStream()</code> only returns when new updates are made to the document.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"3.a: Subscribing to document stream"},{"content":"<h3 id=\"quick-start-to-the-js-api-step-3-geting-vs-streaming-data-3b-observe-the-updates-in-realtime\">3.b: Observe the updates in realtime</h3><p>Let’s see live updates in action. We will modify the book price in our original <code>jsonObject</code> variable from 5595 to 6034 and apply <code>index()</code> again.</p><p>For brevity, we will not show the <code>index()</code> operation here.</p><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p><p><code>Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by persisting the state using a composition of (_type, _id) fields.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"3.b: Observe the updates in realtime"},{"content":"<h2 id=\"quick-start-to-the-js-api-step-4-streaming-rich-queries\">Step 4: Streaming Rich Queries</h2><p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data changes? The <code>searchStream()</code> method scratches this itch perfectly. </p><p>In the example below, we will see it in action with a <code>match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p><p><code>Note:</code> Like <code>getStream()</code>, <code>searchStream()</code> subscribes to the new matches. For fetching existing search results, check out <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-getting-data-search\"><code>search()</code></a>.</p><p><strong>v0.10.0</strong> introduces a new method <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code>searchStreamToURL()</code></a> that streams results directly to a URL instead of streaming back.</p><p>In this tutorial, we have learnt how to index new data and stream both individual data and results of an expressive query. <a href=\"https://appbase.io\">Appbase.io</a> supports a wide range of queries.</p><p>For next steps, check out our <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html\">Javascript API reference</a>.</p>","link":"./scalr/javascript/javascript-intro.html","spaLink":"#/scalr/javascript/javascript-intro","title":"STEP 4: STREAMING RICH QUERIES"},{"content":"<h1 id=\"webhooks-guide\">Webhooks Guide</h1><p>Webhooks (aka streaming to a URL) allows you to set up integrations which respond to events in appbase.io. Webhooks can be used to send transaction emails, post on a slack channel when a new user signs up, update the pricing plan when the data storage crosses a threshold.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"WEBHOOKS GUIDE"},{"content":"<h2 id=\"webhooks-guide-how-webhooks-are-triggered\">How webhooks are triggered</h2><p>Webooks are continuous queries whose results are subscribed by a URL. A webhooks object contains 1) continuous query and 2) subscribed URL’s configurations (headers, body payload, count, interval).</p><p>Webhooks can be triggered when a new document is inserted, an existing document changes it’s value, or when a new document matches a specific continuous query condition.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"HOW WEBHOOKS ARE TRIGGERED"},{"content":"<h2 id=\"webhooks-guide-composing-webhooks-queries\">Composing Webhooks Queries</h2><p>Since registering a webhook is a method of the <code>Appbase</code> object, we will start with instantiating an Appbase object.</p><p>Webhooks in appbase-js are supported by <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code>searchStreamToURL()</code></a>. The behavior is very similar to  <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstream\"><code>searchStream()</code></a>, where the results are subscribed via a streams interface. Instead of subscribing the results back to the user, webhooks subscribe them to a URL.</p><p>Here, we set the webhook request to be sent every time there is a document insert in the <code>type</code> tweet. To control for the noise, we set the <code>interval</code> to 60s.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"COMPOSING WEBHOOKS QUERIES"},{"content":"<h3 id=\"webhooks-guide-composing-webhooks-queries-modifying-a-webhooks-url\">Modifying a Webhook’s URL</h3><p>The <code>searchStreamToURL()</code> method returns a stream object with a method <code>change()</code> which can be used to change the webhook’s subscribed URL for the original continuous query.</p><p><code>change(object)</code> method accepts a URL object which completely replaces the previous URL object.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"Modifying a Webhook’s URL"},{"content":"<h3 id=\"webhooks-guide-composing-webhooks-queries-deregistering-the-webhook-query\">Deregistering the Webhook Query</h3><p>The <code>searchStreamToURL()</code> method returns a stream object with a method <code>stop()</code> which deletes the webhook query.</p><p><code>stop()</code> method deletes the webhook query. It’s important to call this method only after the webhook is successfully registered.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"Deregistering the Webhook Query"},{"content":"<h2 id=\"webhooks-guide-adding-dynamic-data-in-webhooks\">Adding Dynamic Data in Webhooks</h2><p>Webhooks in appbase.io are designed for configurability.</p><p>Together, these three features allow for a very versatile webhooks streaming. In this doc, we will look at composing webhook queries and a number of different usage scenarios for webhooks.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"ADDING DYNAMIC DATA IN WEBHOOKS"},{"content":"<h3 id=\"webhooks-guide-adding-dynamic-data-in-webhooks-mustache-syntax\">Mustache Syntax</h3><p>One of the biggest uses of webhooks is sending transaction notifications, like sending an email or a push notification within the app. We support Mustache syntax for enabling sending dynamic data in webhook request’s body payload.</p>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"Mustache Syntax"},{"content":"<h2 id=\"webhooks-guide-usage-scenarios\">Usage Scenarios</h2>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"USAGE SCENARIOS"},{"content":"<h3 id=\"webhooks-guide-usage-scenarios-1-top-10-daily-recommendations\">1. Top 10 daily recommendations</h3>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"1. Top 10 daily recommendations"},{"content":"<h3 id=\"webhooks-guide-usage-scenarios-2-pricing-plan-change-and-notification\">2. Pricing plan change and notification</h3>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"2. Pricing plan change and notification"},{"content":"<h3 id=\"webhooks-guide-usage-scenarios-3-bitcoin-price-alert\">3. Bitcoin price alert</h3>","link":"./scalr/javascript/javascript-webhooks.html","spaLink":"#/scalr/javascript/javascript-webhooks","title":"3. Bitcoin price alert"},{"content":"<h1 id=\"meteor-api-quickstart\">Meteor API Quickstart</h1><p>Appbase is a minimalistic library for data streams.</p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over websockets (for browsers) and http-streams.</li>\n<li>Index new documents or update / delete existing ones. </li>\n</ul><p>It can be added to a meteor project by running</p>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"METEOR API QUICKSTART"},{"content":"<h2 id=\"meteor-api-quickstart-using-it-client-side\">Using it client-side</h2><p>You can read the <a href=\"http://docs.appbase.io/scalr/javascript/javascript-intro.html\">Javascript</a> quick-start guide for basic usage. </p><p>The API reference for using the library client-side can be found <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html\">here</a>.</p>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"USING IT CLIENT-SIDE"},{"content":"<h2 id=\"meteor-api-quickstart-using-it-server-side\">Using it server-side</h2><p>First, create a new Appbase reference like you would on the client. </p><p>The only difference between the client and server libraries is that all methods on the server except <code>getStream</code> and <code>searchStream</code> are synchronous. </p>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"USING IT SERVER-SIDE"},{"content":"<h3 id=\"meteor-api-quickstart-using-it-server-side-creating-an-appbase-reference\">Creating an Appbase reference</h3>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"Creating an Appbase reference"},{"content":"<h3 id=\"meteor-api-quickstart-using-it-server-side-writing-data\">Writing data</h3><p>An example using the <code>index</code> method is given below. Other methods like <code>update</code>, <code>get</code>, <code>delete</code>, <code>search</code> and <code>searchStreamToURL</code> can be used in a similar manner. </p><p>Refer to the client-side <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html\">documentation</a> for the parameters they can take. </p><p>Writes a JSON data object at a given <code>type</code> and <code>id</code> location, or replaces if an object already exists.</p>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"Writing data"},{"content":"<h2 id=\"meteor-api-quickstart-streaming-data\">Streaming Data</h2><p>The streaming methods are <code>searchStream</code> and <code>getStream</code>.</p><p>Streaming is done in a similar way on both client and server. An example using <code>searchStream</code> is given below. </p>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"STREAMING DATA"},{"content":"<h3 id=\"meteor-api-quickstart-streaming-data-searchstream\">searchStream()</h3><p><code>searchStream()</code> subscribes to search results on new document inserts, existing search results can be fetched via <code>search()</code> method.</p><p>The reactive array used below can be installed using</p><p><strong>Returns</strong></p><p><a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream.Readable</a> <code>Object</code> with</p><ul>\n<li><code>'data'</code> and <code>'error'</code> event handlers</li>\n<li>a <strong>stop()</strong> method to stop the stream</li>\n</ul>","link":"./scalr/javascript/meteor-intro.html","spaLink":"#/scalr/javascript/meteor-intro","title":"searchStream()"},{"content":"<h1 id=\"quick-start-to-the-nodejs-api\">Quick Start to the <img src=\"http://i.imgur.com/Eppz2lz.png?1\" alt=\"Scalr\"> Node.JS API</h1><p><a href=\"https://github.com/appbaseio/appbase-js\">Appbase.JS</a> is a minimalistic library for data streams.  </p><p>It can:</p><ul>\n<li>Continuously stream updates to documents, queries or filters over <code>websockets</code>.</li>\n<li>Index new documents or update / delete existing ones.</li>\n</ul><p>It can’t:  </p><ul>\n<li>Configure mappings, change analyzers, or capture snapshots. All these are provided by <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html\">elasticsearch.js</a> - the official ElasticSearch JS client library.</li>\n</ul><p>Also, <a href=\"https://appbase.io\">Appbase</a> is opinionated about the cluster setup and doesn’t support the ElasticSearch devops APIs.</p><p>This is a quick start guide to whet the appetite with the possibilities of data streams.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"QUICK START TO THE  NODE.JS API"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"http://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for a simple username/password authentication.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-1-lib-setup\">Step 1: Lib Setup</h2><p>We will fetch and install the <strong>appbase-js</strong> lib via <a href=\"https://www.npmjs.com/package/appbase-js\">npm</a>, current version should be v0.10.1.</p><p>Requiring the lib takes one line:</p><p>To write data or stream updates from <a href=\"https://appbase.io\">appbase.io</a>, we need to first create a reference object. We do this by passing the API URL, appname, and a username:password combination into the <code>Appbase</code> constructor:</p><p><strong>OR</strong></p><p>Alternatively, username:password can be passed as a part of the API URL in the constructor.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 1: LIB SETUP"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-2-storing-data\">Step 2: Storing Data</h2><p>Once we have the reference object (called <code>appbaseRef</code> in this tutorial), we can insert any JSON object into it with the <code>index()</code> method.</p><p>where <code>type: 'books'</code> indicate the collection (or table) inside which the data will be stored and the<code>id: '1'</code> is an optional unique identifier.</p><p>The <code>index()</code> method (and all the other <code>appbase</code> methods) return a <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream</a> object. A ‘data’ event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.</p><p><span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a <em>collection in MongoDB</em> or a <em>table in SQL</em>, and a document is similar to the document in MongoDB and equivalent to a <em>row in SQL</em>.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 2: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-3-geting-vs-streaming-data\">Step 3: <s>GETing</s> vs Streaming Data</h2><p>Unlike typical databases that support GET operations (or Read) for fetching data and queries, Appbase.io operates on both GET and stream modes. We will first apply the GET mode to read our just inserted object.</p><p>Now that we are able to store data, let’s try to get the data back from <a href=\"https://appbase.io\">appbase.io</a> with the <code>get()</code> method.</p><p>Even though <code>get()</code> returns a single document data, appbase.io returns it as a stream object with the ‘data’ event handler.</p><p>Let’s say that we are interested in subscribing to all the state changes that happen on a document. Here, we would use the <code>getStream()</code> method over <code>get()</code>, which keeps returning new changes made to the document.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 3: GETING VS STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-nodejs-api-step-3-geting-vs-streaming-data-3a-subscribing-to-document-stream\">3.a: Subscribing to document stream</h3><p>Don’t be surprised if you don’t see anything printed, <code>getStream()</code> only returns when new updates are made to the document.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"3.a: Subscribing to document stream"},{"content":"<h3 id=\"quick-start-to-the-nodejs-api-step-3-geting-vs-streaming-data-3b-observe-the-updates-in-realtime\">3.b: Observe the updates in realtime</h3><p>Let’s see live updates in action. We will modify the book price in our original <code>jsonObject</code> variable from 5595 to 6034 and apply <code>index()</code> again.</p><p>For brevity, we will not show the <code>index()</code> operation here.</p><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p><p><code>Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by persisting the state using a composition of (_type, _id) fields.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"3.b: Observe the updates in realtime"},{"content":"<h2 id=\"quick-start-to-the-nodejs-api-step-4-streaming-rich-queries\">Step 4: Streaming Rich Queries</h2><p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data changes? The <code>searchStream()</code> method scratches this itch perfectly. </p><p>In the example below, we will see it in action with a <code>match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p><p><code>Note:</code> Like <code>getStream()</code>, <code>searchStream()</code> subscribes to the new matches. For fetching existing search results, check out <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-getting-data-search\"><code>search()</code></a>.</p><p><strong>v0.10.0</strong> introduces a new method <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html#javascript-api-reference-streaming-data-searchstreamtourl\"><code>searchStreamToURL()</code></a> that streams results directly to a URL instead of streaming back.</p><p>In this tutorial, we have learnt how to index new data and stream both individual data and results of an expressive query. <a href=\"https://appbase.io\">Appbase.io</a> supports a wide range of queries.</p><p>For next steps, check out our <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html\">Javascript API reference</a>.</p>","link":"./scalr/javascript/nodejs-intro.html","spaLink":"#/scalr/javascript/nodejs-intro","title":"STEP 4: STREAMING RICH QUERIES"},{"content":"<h1 id=\"quick-start-to-the-rest-api\">Quick Start to the <img src=\"http://i.imgur.com/a1KAate.png\" alt=\"Scalr\"> REST API:</h1>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"QUICK START TO THE  REST API:"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"http://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for simple username/password authentication. This is similar to how GitHub’s authentication works over <code>https</code>, just imagine every repository (app in our context) having it’s unique &lt;username&gt;:&lt;password&gt; combination.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 0: CREATING AN APP"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-1-making-requests\">Step 1: Making Requests</h2><p>Here’s an example authenticated <code>GET</code> request. We will set the app name, username and password as bash variables and reuse them in the requests.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 1: MAKING REQUESTS"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-1-storing-data\">Step 1: Storing Data</h2><p>Let’s insert a JSON object. We create a <strong>type</strong> <code>books</code> inside our app and add a JSON document <code>1</code> with a PUT request.</p><p>If you have noticed, SCALR uses the same APIs as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a <em>collection in MongoDB</em> or a <em>table in SQL</em>, and a document is similar to the document in MongoDB and equivalent to a <em>row in SQL</em>.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 1: STORING DATA"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data\">Step 2: <s>GETing</s> err, Streaming Data</h2><p>Getting live updates to a document is as simple as suffixing <code>?stream=true</code> to a GET request. It’s so awesome that we recommend using this as the default way to GET things.</p><p>Appbase.io keeps an open connection so that every time there is an update in the <code>/$app/books/1</code> document, it is streamed via the connection.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 2: GETING ERR, STREAMING DATA"},{"content":"<h3 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data-step-2a-modify-the-document\">Step 2.a: Modify the Document</h3><p>Let’s modify the book price to 6034.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"Step 2.a: Modify the Document"},{"content":"<h3 id=\"quick-start-to-the-rest-api-step-2-geting-err-streaming-data-step-2b-observe-the-streams\">Step 2.b: Observe the Streams</h3><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed to the resonse as raw JSON objects. As we see, there are no delimiters between between two consecutive JSON responses.</p><p>For every <code>?stream=true</code> request, Appbase.io keeps an open connection up to a max of 6 hrs.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"Step 2.b: Observe the Streams"},{"content":"<h2 id=\"quick-start-to-the-rest-api-step-3-streaming-search\">Step 3: Streaming Search</h2><p>Streaming document updates seems straightforward, can we apply rich filters and queries to our streams? Yes, we can. We can specify any ElasticSearch Query DSL request, and get responses via streams.</p><p>We will see it here with a <code>match_all</code> query request.</p>","link":"./scalr/rest/intro.html","spaLink":"#/scalr/rest/intro","title":"STEP 3: STREAMING SEARCH"},{"content":"<h1 id=\"datamodel\">Datamodel</h1><p>Appbase is a realtime Database as a Service (DBaaS), built on top of a graph schema with JSON based vertices (similar to JSON documents), and edges to link them.</p><p>All databases support the storing and fetching of data, what distinguishes one database type from another is the structure of the data they store and the means by which it can be retrieved. </p><p>Several popular databases can be classified as below:</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"DATAMODEL"},{"content":"<h2 id=\"datamodel-data-in-appbase\">Data in Appbase</h2><p>Appbase is a <a href=\"http://en.wikipedia.org/wiki/Directed_graph\"><em>Directed Graph</em></a>. Objects inside Appbase are called <a href=\"http://en.wikipedia.org/wiki/Vertex_(graph_theory\">Vertices</a>) (a graph term for entities), and the links (relationships) between the objects are called <a href=\"http://en.wikipedia.org/wiki/Glossary_of_graph_theory#Basics\">Edges</a>.</p><p>Data in Appbase is stored as JSON objects. Appbase supports flexible schema, i.e. the properties of the JSON object need not be defined in advance. </p><p>Although Appbase supports storing embedded JSON objects and arrays, one doesn’t have to store data in this denormalized fashion. This is mainly for compatibility with existing document stores like MongoDB. The recommended approach is to create reference links between distint entities. In this doc, we will cover how you can store different kinds data (primitive values, objects, lists), create relationships amongst them, normalize, and do perform different queries on them.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"DATA IN APPBASE"},{"content":"<h2 id=\"datamodel-concepts\">Concepts</h2><p>Similar to how SQL has concepts for <em>table</em>, <em>row</em>, <em>column</em>, <em>relation</em> and MongoDB has <em>collection</em> , <em>Document</em> and <em>fields</em>, here are the key concepts in Appbase.</p><p><strong>Vertex</strong> — is similar to a <em>Document</em> in MongoDB, it stores data.  </p><ul>\n<li><strong>Key</strong> — A string that is used to access the vertex as an entry point.</li>\n<li><strong>Properties</strong> — A JSON object representing the data inside the vertex. </li>\n</ul><p><strong>Namespace</strong> — is similar to a <em>Collection</em> in MongoDB or <em>type</em> in ElasticSearch. A <em>vertex</em> always belongs to a <em>namespace</em> and <em>security rules</em> can be applied on <em>namespaces</em>. </p><p><strong>Edge</strong> — is a directional link to another vertex.  </p><ul>\n<li><strong>Priority</strong> — An <em>edge</em> can optionally have a priority, a <strong>Number</strong> (a secondary index).</li>\n<li><strong>outVertex</strong> — is the vertex which the edge points <em>to</em>.</li>\n<li><strong>inVertex</strong>  — the vertex <em>from</em> which the edge starts.</li>\n</ul><p>i.e. an <em>edge</em> is pointed from <em>inVertex</em> to an <em>outVertex</em>.</p><p><strong>Path</strong> — Every <em>vertex</em> in Appbase has a path, starting from the &lt;namespace&gt; and ending at the <em>vertex</em>, not unlike the UNIX path. A typical path looks like &lt;namespace&gt;/&lt;v1&gt;/&lt;v2&gt;/…/&lt;vn&gt;/.</p><p><strong>URL</strong> — It is a way to point to a <em>Path</em> in the REST API. Paths are prefixed with the Appbase API base URL, application’s name and the API version. Eg. <a href=\"https://api.appbase.io/chat_app/v2/&lt;path&gt;/\">https://api.appbase.io/chat_app/v2/&lt;path&gt;/</a>.</p><p>We can not actually compare these concepts with other kinds of databases, but it helps to understand Appbase if we compare the <em>usage practices</em>.</p><p>With this table in mind, lets understand how the concepts work.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"CONCEPTS"},{"content":"<h3 id=\"datamodel-concepts-vertex\">Vertex</h3><p>Vertex is the the standard data container in Appbase. A vertex can store a valid JSON object and be linked to other vertices via <em>edges</em>.</p><p>It can also store nested JSON objects and arrays, but this is only for convenience. In practice, vertices act as singular data entities, i.e. you store only the data relevant to a single entity in the real world. For e.g. a person’s age, name, height, sex can be stored in a single vertex, but the data of his belongings, like a book or a car is a completely different entity. This new entity will have properties of its own and they should be stored inside a new vertex. Later in this document, we will see how we can create a relation between these two entities.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Vertex"},{"content":"<h3 id=\"datamodel-concepts-namespace\">Namespace</h3><p>Namespaces are a way to combine <em>similar</em> entities. For eg. all vertices storing different users can be stored inside the <em>user</em> namespace and all the tweets (repreented as vertices) can be stored inside the <em>tweet</em> namespace. Since namespace is a logical container, different kinds of objects can be stored inside a single namespace. This allows searching for <em>similar vertices</em> and applying <em>security rules</em> with ease.</p><p>Namespaces are <em>searchable</em>. We are using the open-source <a href=\"http://www.elasticsearch.org/\">ElasticSearch</a> behind the scenes to support this use-case. See <a href=\"http://docs.appbase.io/docs/search.html\">this documentation</a> for a quick intro on how search works.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Namespace"},{"content":"<h3 id=\"datamodel-concepts-edge-one-to-one-relationships\">Edge (one-to-one relationships)</h3><p>After creating entities, its time to create relations amongst them via <em>edges</em>. </p><p>An edge is a <em>named</em> directional link connecting two vertices for a purpose, a <em>one-to-one relation</em>. For instance, a book has an author, a husband has wife and a child has a mother. The edges for these would be <em>book vertex</em> <code>--authouredBy-&gt;</code> <em>person vertex</em>, <em>man vertex</em> <code>--marriedTo-&gt;</code> <em>woman vertex</em>. </p><p>Edges are directional, so if you set the edge <em>man</em> <code>--marriedTo-&gt;</code> <em>woman</em>, it only tells us that the man is married to the woman, but it tells us nothing about woman’s relationship status. For that, another edge, <em>woman</em> <code>--marriedTo-&gt;</code> <em>man</em>, should be created.</p><p>Appbase only allows for unique edge names. The default behaviour is last-write-wins in case a new edge is created with an existing name. Edges have priorities which are rational numbers (think of the <code>Number</code> datatype in Javascript).</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Edge (one-to-one relationships)"},{"content":"<h3 id=\"datamodel-concepts-path\">Path</h3><p>Paths are the way to interact with vertices in Appbase. Paths are constructed with &lt;namespace&gt;/&lt;vertexKey&gt;/&lt;edgeName_1&gt;/…/&lt;edgeName_N&gt;/.</p><p>Creating edges create deeper <em>Paths</em>. Lets take the example of the movie Inception, the Oscar deserver lead actor Leonardo DiCaprio, and the director Christopher Nolan. Here are the vertices stored in Appbase:</p><ul>\n<li>Namespace: movie</li>\n<li>Vertex Key: inception</li>\n</ul><ul>\n<li>Namespace: person</li>\n<li>Vertex Key: dicaprio</li>\n</ul><ul>\n<li>Namespace: person</li>\n<li>Vertex Key: nolan</li>\n</ul><ul>\n<li>Namespace: person</li>\n<li>Vertex Key: emma</li>\n</ul><p>These vertices can be accessed with the following paths, as entry points in the graph:</p><p>Let’s create edges:</p><p><img src=\"http://i.imgur.com/2Asfr9r.png\" alt=\"\"></p><p>With these edge, we created these deeper paths:</p><p><code>movie/inception/leadActor</code> : points to the same vertex as <code>person/dicaprio</code></p><p><code>movie/inception/directedBy</code> : points to <code>person/nolan</code></p><p><code>person/nolan/marriedTo</code>: points to <code>person/emma</code></p><p>Here’s the <em>magic</em>, the path <code>movie/inception/directedBy/marriedTo</code> points directly to <code>person/emma</code></p><p>This means, modifying the data stored at <code>movie/inception/directedBy/marriedTo</code> will change the data of <code>person/emma</code> as they both are the same vertices.</p><p>Paths are powerful ways to point to the exact data you want to interact with. For e.g.  when you access the path <code>movie/inception/directedBy/marriedTo</code>, you are only interested in the vertex representing the person who is married to the director of Inception, and nothing else. You never access the data of the movie Inception, or the director.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Path"},{"content":"<h3 id=\"datamodel-concepts-url\">URL</h3><p>A URL is just another representation of a <em>Path</em>. REST API URL looks like this: <a href=\"https://api.appbase.io/&lt;app_name&gt;/v2/&lt;path&gt;/\">https://api.appbase.io/&lt;app_name&gt;/v2/&lt;path&gt;/</a>. </p><p>Assuming the Application’s name as <em>imdb</em>, URL for the path <em>movie/inception/directedBy/marriedTo</em> would be <code>https://api.appbase.io/imdb/v2/movie/inception/directedBy/marriedTo</code></p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"URL"},{"content":"<h2 id=\"datamodel-storing-data\">Storing Data</h2><p>Being a Graph, Appbase allows you to create any kind of data structures you want, you just need to know exactly how. Lets see how to store the practical data structures we used on daily basis.</p><p>The examples here use Appbase Javascript Library and if any of the method is confusing you, feel free to chekout the <a href=\"http://docs.appbase.io/#/v2.0/javascript/api-reference\">JS Documentation</a>.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"STORING DATA"},{"content":"<h3 id=\"datamodel-storing-data-primitive-data-and-json-objects\">Primitive Data and JSON Objects</h3><p>Numbers, Characters, Strings and Booleans, are stored as values of the properties inside a vertex. Dates can be converted into the milliseconds since epoch, and store them as Numbers. For eg. you want to store a the movie’s name, and its release year, you can store combine all of them as a JSON object and store it inside a vertex.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Primitive Data and JSON Objects"},{"content":"<h3 id=\"datamodel-storing-data-nested-json-objects\">Nested JSON Objects</h3><p>You can store nested objects directly inside a vertex. E.g.</p><p>This would work perfectly. Notice that you are not storing the director (Nolan) of Inception as a <em>different entity</em>, instead as a <em>property</em> of the movie itself. While this approach is sometimes handy, it limits you in terms of what you can do with Nolan. I.e. you will not be able to establish any direct relationships with Nolan, as it is not an entity in itself. For eg. Nolan is married to Emma, but there is no way to create a link between Nolan  and Emma, when it is stored as a nested object in Appbase.</p><p>A better to do this is store Nolan as a new vertex, and create an edge from Inception to Nolan. You can create another vertex for Emma create edges with Nolan. </p><p>We will create three edges here: </p><p>inception <code>--directedBy-&gt;</code> nolan</p><p>nolan <code>--marriedTo-&gt;</code> emma\nRecall that the edges are <em>directional</em>, so this 2nd edge only tells us that Nolan in married to Emma, but says nothing about Emma’s marital status. That’s why we create the third edge: </p><p>emma <code>--marriedTo-&gt;</code> nolan</p><p><img src=\"http://i.imgur.com/IipHJzL.png\" alt=\"\"></p><p>Notice that Inception directed by Nolan, is a One-to-One relationship. Nolan has directed many movies, and that’s a case of One-to-Many relationships. We see later how to create them in Appbase. </p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Nested JSON Objects"},{"content":"<h3 id=\"datamodel-storing-data-sets-one-to-many-relationship\">Sets (One-to-Many Relationship)</h3><p>A set makes sure that all the items in the list exist only once. Consider this example, the movies directed by Nolan. We will make only a small list here:  <code>[\"Interstellar\", \"Inception\", \"The Dark Night\", \"Memento\"]</code>. Clearly, it doesn’t make sense to have any of the movies twice in the this list.  Notice that this is a One-to-Many relationship here. <em>Nolan</em> (1) -&gt; <em>Movies</em> (N).</p><p>Operations on a single set are: addition, checking existence of an item, deletion and traversal. </p><p>Operations on multiple sets, like union and intersection can be emulated using single-set operations. For e.g.</p><p>Let’s see a practical set, the movies directed by Nolan. </p><p>In Appbase, the Set is a vertex, let’s create it.</p><p>Also the Items in the set are vertices.</p><p>Now we have Appbase Vertex References to the Set and the Items, lets go through different set operations.</p><p>Simply creating an edge from the Set to the Item. We will use the Primary Key (<code>inceptionRef.name()</code>) of the item as the name of the edge.</p><p>Here, the important thing is to keep the edge-name exactly as the Vertex Key. That way makes sure that every item will exist only once in the set. For e.g. if you try to add <code>inceptionRef</code> again in the set, it will just replace the old edge no extra edges will be created.</p><p>Keeping the edge-name same as the Vertex Key of the item, allows other operations as well, like deletion of an Item and checking where an Item exists.</p><p>Remove the edge from Set to the Item.</p><p>As we kept the edge name exactly as the Vertex Key, it means that we can use the Vertex Key to delete the edge as well.</p><p>It’s not possible to check via the Item’s data, if the item exists or not. The only way we can check, is using the Vertex Key/edge-name. We see that if there’s an edge, with its name as the Vertex Key. We use <code>outVertex()</code> and <code>isValid()</code> for that. I.e. we are checking if the path <code>set/moviesByNolan/&lt;movieVertexKey&gt;</code> is valid or not.</p><p>As all the items are the edges of the Set vertex, we simply fetch the edges of the Set vertex, and traverse through them.</p><p>See <em>Retrieving Data</em> section.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Sets (One-to-Many Relationship)"},{"content":"<h2 id=\"datamodel-retrieving-data\">Retrieving Data</h2><p>In a nutshell, Namspaces in Appbase have vertices, and vertices have properties, edges.</p><p>Data retrieval in Appbase happens via <em>realtime streams</em>. These streams allows you to fetch existing data, and then keep listening to new data as well.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"RETRIEVING DATA"},{"content":"<h3 id=\"datamodel-retrieving-data-properties\">Properties</h3><p>When you start listening to the properties of a vertex, you first get the existing properties, and then as the data keeps changing, the callback is called again with new properties.</p><p>Appbase gives you the properties data as a <em>snapshot</em>. The snapshots are immutable copies of the data stored in a vertex. Any changes you make in the snapshot will not be stored in Appbase. </p><p>If you don’t want to listen to the properties any more, you can turn the listener off with <code>inceptionRef.off()</code>.</p><p>For convenience, we have the method  <code>inceptionRef.once()</code> when you want to listen to daat just only once.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Properties"},{"content":"<h3 id=\"datamodel-retrieving-data-edges\">Edges</h3><p>Retrieving existing edges of a vertex is simple: just listen to _edge<em>added</em> event, which will return existing edges at first. When new edges are added, the callback will be fired for new edges as well.</p><p>Notice that the if there are ‘N’ number of existing edges, the callback will be called ‘N’ times.</p><p><code>eRef</code> here is the Appbase Reference to the outVertex, and <code>eSnap</code> is the snapshot of the edge. Edge Snapshot is the snapshot of the data stored with the edge and the out vertex, mainly the <em>priority</em> of the edge, and the properties of the out vertex. <code>eSnap.priority()</code> will give you the priority, and <code>eSnap.properties()</code> will give you properties.</p><p>With edge filters, it is possible to fetch only certain edges. It comes handy when there are large number of edges and you want to paginate them, or want to fetch only a particular edge.</p><p>When more than one filter is provided, they work as logical <code>AND</code> and only the edges matchihg all filters will be fetched. This is what each filter means:</p><p>Notice that:</p><ul>\n<li>Filters are a way to fetch existing edges, thus they work only with _edge<em>added</em> event</li>\n<li>Edges are always returned ordered according to their priorities</li>\n<li>When <em>endAt</em> &lt; <em>startAt</em>, edges are returned in reverse order</li>\n<li>You can NOT apply all the numeric filters (first four) to newly created edges, they are only for existing edges and it is NOT possible to apply filters to newly created edges in realtime<ul>\n<li>This means that the numeric filters can not be used with <em>onlyNew</em> set to be <code>true</code></li>\n<li><em>Newly created</em> edges will NOT be fired when any of the numeric filter is applied, i.e. only the existing edges will be returned</li>\n</ul>\n</li>\n</ul><ul>\n<li>This means that the numeric filters can not be used with <em>onlyNew</em> set to be <code>true</code></li>\n<li><em>Newly created</em> edges will NOT be fired when any of the numeric filter is applied, i.e. only the existing edges will be returned</li>\n</ul>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Edges"},{"content":"<h3 id=\"datamodel-retrieving-data-vertices-in-a-namespace\">Vertices in a Namespace</h3><p>Namespaces are vertex containers, and it is possible to retrieve existing vertices, and listen to updates when new vertices are added or old vertices are removed.</p><p>The callback attached with _vertex<em>added</em> event is called for all the existing vertices. As new vertices are added, it is called for them too.</p><p>To listen to updates of vertex removal, use _vertex<em>removed</em> event.</p><p>With ElasticSearch’s powerful APIs in the backend, Appbase supports full-text fuzzy search queries on the data stored into vertices of a namespace. A sample query on a namespace looks something like this: </p><p>This query searches on all the vertices of the namespace <em>movie</em>, and returns an array of vertices who’s property <code>year</code>, matches fuzzily with the text “2010”. See <a href=\"http://docs.appbase.io/docs/search.html\">this documentation</a> for more details.</p>","link":"./v2.0/concepts/datamodel.html","spaLink":"#/v2.0/concepts/datamodel","title":"Vertices in a Namespace"},{"content":"<h1 id=\"ng-appbase-guide\">ng-Appbase Guide</h1><p>Appbase provides a realtime graph backend, is designed to write complex applications completely clientside. Appbase fits perfectly as a backend in your AngularJS application.</p><p>ngAppbase - AngularJS binding for Appbase, makes it very simple to bind your data between AngularJS and Appbase backend.</p><p><a href=\"http://appbase.io/tutorial.html\">Here</a>‘s a quick tutorial for Appbase JS api.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"NG-APPBASE GUIDE"},{"content":"<h2 id=\"ng-appbase-guide-integrating-the-awesome\">Integrating the awesome</h2><p>Add these script tags in your HTML:</p><p>Register <code>ngAppbase</code> as a dependency in the module, and the <code>$appbase</code> is available to be injected into any controller, service, or factory.</p><p><code>$appbase</code>, has the same methods as <code>Appbase</code> object exposed by the Appbase Javascript library. The difference is, when Appbase refrences (namespace and vertex) are created using <code>$appbase</code>, they have extra methods which allows binding your data with scope variables in Angular.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"INTEGRATING THE AWESOME"},{"content":"<h2 id=\"ng-appbase-guide-binding-objects\">Binding Objects</h2><p>As Angular binds the data between JS models and the DOM, ngAppbase propagates any changes the data from Appbase. This way, any changes to Appbase automatically appears in the DOM.\nNotice that, the changes in the JS model are <em><strong>not</strong></em> automatically sent to Appbase backend.</p><p><code>bindProperties</code> creates such a synchronized object, by binding properties of a vertex in Appbase, to a variable in JS.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"BINDING OBJECTS"},{"content":"<h3 id=\"ng-appbase-guide-binding-objects-example\">Example:</h3><p>Assume the properties of the vertex at <strong>‘user/bella’</strong> : </p><p>To bind this data to your view,\nJS:</p><p>HTML:</p><p>As Appbase notifies for data changes in realtime, if the data at <strong>‘user/bella’</strong> changes, i.e. if <code>$appbase.ns('user').v('bella').setData({having: 'Cerveja'})</code> is called, this change will be reflected in the scope variable instantly, and Angular will update the view.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"Example:"},{"content":"<h2 id=\"ng-appbase-guide-binding-arrays\">Binding Arrays</h2><p><code>ng-repeat</code> in AngularJS binds a list in DOM to an array model in JS, and this array can be bound to the <em>edges</em> of a <strong>vertex</strong>, or <em>vertices</em> in a <strong>namespace</strong> in Appbase, using <code>bindEdges</code> and <code>bindVertices</code>.</p><p>When edges or vertices are added, removed, replaced, or the priority is changed, these changes appear in the DOM in realtime.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"BINDING ARRAYS"},{"content":"<h3 id=\"ng-appbase-guide-binding-arrays-example\">Example</h3><p>Data in the out vertex pointed by the edge:</p><p>To bind this data into you view:\nJS:</p><p>HTML:</p><p>The same way, you can bind vertices under a namespace, as an array.</p><p>JS:</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"Example"},{"content":"<h2 id=\"ng-appbase-guide-modifying-data\">Modifying data</h2><p>Vertex References created with <code>$appbase.ns().v()</code> has all the methods exactly as the Appbase Javascript API. You can use methods <code>setData()</code> and <code>setEdge()</code> to modify the data.</p><p>The  documentation for Appbase JS api is <a href=\"http://docs.appbase.io/docs/js.html\">here</a>.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"MODIFYING DATA"},{"content":"<h2 id=\"ng-appbase-guide-next-steps\">Next Steps</h2><p>Checkout additional documentation for <code>bindEdges()</code>, <code>bindVertices()</code> and <code>bindProperties()</code> further down on this page.</p><p>Checkout this opensource <a href=\"http://twitter.appbase.io/\">Twitter clone</a> we built using this Angular binding in under ~250 lines of javascript code.</p><p>Have a great time building awesome realtime applications!</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"NEXT STEPS"},{"content":"<h1 id=\"appbase-api-docs\">$appbase API Docs</h1>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"$APPBASE API DOCS"},{"content":"<h2 id=\"appbase-api-docs-vertexrefbindedges\">vertexRef.bindEdges()</h2>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"VERTEXREF.BINDEDGES()"},{"content":"<h3 id=\"appbase-api-docs-vertexrefbindedges-returns\">Returns</h3><p>An <strong>array</strong> of edges, <em>sorted</em> by the <strong>priority</strong> of edges.\nEach object (called <em>edgeData</em> from now on) in array represents an edge and contains this data:</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"Returns"},{"content":"<h3 id=\"appbase-api-docs-vertexrefbindedges-arguments\">Arguments</h3><ul>\n<li><strong>scope</strong> : The angular scope where bindEdges() is called.</li>\n<li><strong>onAdd</strong> <em>(function)</em>: called when an edge is added. This function basically gives the programmer a facility to modify what should be available in <code>edgeData</code>. You can add more data into it, which will be automatically added in to the array, which bound to a scope variable, you don’t need to manually add any data to the scope.  The <code>edgeRef</code> passed in the callback helps fetching more data relevant to the edge. <code>done()</code> should be called when the required data is added in <code>edgeData</code>, only after that the <code>edgeData</code> will added in the array.</li>\n<li><strong>onComplete</strong> <em>(function)</em>: called when existing edges are fired. Works exactly as <code>onComplete</code> callback for _edge<em>added</em> event in Appbase Javascript Library.</li>\n<li><strong>onRemove</strong> <em>(function)</em>: called when an edge is removed. To remove the <code>edgeData</code> from the array, calling <code>done()</code> is necessary.</li>\n<li><strong>onChange</strong> <em>(function)</em>: called when the properties of the vertex are changed. To reflect the changes in the scope, calling <code>done()</code> is necessary.</li>\n<li><strong>onUnbind</strong> <em>(function)</em>: called when the scope variable is unbound from edges. You should turn off the listeners here, if added any in the <code>onAdd</code> callback.</li>\n</ul><p>Note that the vertex references returned in the callback, also have the methods <code>bindProperties</code> and <code>bindEdges</code>. Using <code>onAdd</code> callback and these methods, you can bind multiple level of edges.</p><p>Eg.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"Arguments"},{"content":"<h2 id=\"appbase-api-docs-bindvertices\">bindVertices()</h2><p><code>bindVertices</code> works exactly as <code>bindEdges</code>, except that it is invoked on a namespace reference and returns an array of all the vertices in the namespace. Callbacks <em>onAdd</em>, <em>onRemove</em> and <em>onChange</em> are called, respectively, when a vertex is added, destroyed and properties are changed. <em>onComplete</em> is called when existing vertices are retrieved. Works exactly as <code>onComplete</code> callback for <em>vertex_added</em> event in Appbase Javascript Library.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"BINDVERTICES()"},{"content":"<h2 id=\"appbase-api-docs-bindproperties\">bindProperties()</h2>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"BINDPROPERTIES()"},{"content":"<h3 id=\"appbase-api-docs-bindproperties-returns\">Returns</h3><p>An <strong>object</strong> , containing <em>properties</em> of the vertex as key-value pairs.</p>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"Returns"},{"content":"<h3 id=\"appbase-api-docs-bindproperties-arguments\">Arguments</h3><ul>\n<li><strong>scope</strong> : The angular scope where bindEdges() is called.</li>\n<li><strong>onProperties</strong> <em>(function)</em>: called when the properties are received/updated from server </li>\n<li><strong>onUnbind</strong> <em>(function)</em>: called when the scope variable is unbound. You should turn off the listeners here, if added any in the <code>onProperties</code> callback.</li>\n</ul>","link":"./v2.0/javascript/angular.html","spaLink":"#/v2.0/javascript/angular","title":"Arguments"},{"content":"<h1 id=\"introduction\">Introduction</h1><p>The Appbase JS library allows developers to create realtime multi-user apps using a graph data model and realtime smart-search capabilities.</p><p>To use it in the browser, use this link: <a href=\"https://cdn.appbase.io/latest/appbase.js\">https://cdn.appbase.io/latest/appbase.js</a></p><p>To use it with nodejs, do <code>npm install appbasejs</code></p><p>The Appbase library exposes the <code>Appbase</code> object. The methods in the JS lib rely on three main objects.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"INTRODUCTION"},{"content":"<h1 id=\"appbase\">Appbase</h1><p><strong>Appbase</strong> is the global object exposed the JS library. It has the following four methods: <code>credentials()</code>, \n<code>ns()</code>, <code>uuid()</code>, and <code>serverTime()</code>.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"APPBASE"},{"content":"<h2 id=\"appbase-setting-up\">Setting up</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"SETTING UP"},{"content":"<h3 id=\"appbase-setting-up-credentials\">credentials()</h3><p>Authorize the app credentials using the appname and appsecret identifiers, as they appear in the <a href=\"//appbase.io/developer\">Dev Console</a>.</p><p><strong>Usage</strong></p><p><code>Appbase.credentials(appname, [appsecret , onComplete])</code></p><ul>\n<li><strong>appname</strong> <code>String</code> — App name</li>\n<li><strong>appsecret</strong> <code>String</code> (optional) — App secret key\n  While using Appbase clientside, app secret should not be used, as it will be exposed in the Javascript file. <a href=\"http://docs.appbase.io/#/v2.0/javascript/oauth\">User Authentication</a> is recommended in the clientside use of Appbase Library.</li>\n<li><p><strong>onComplete</strong> <code>Function</code> — will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if event listening is successful</li>\n<li><strong>isAuthorized</strong> <code>Boolean</code> — Whether the credentials are correct or not</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> — will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if event listening is successful</li>\n<li><strong>isAuthorized</strong> <code>Boolean</code> — Whether the credentials are correct or not</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"credentials()"},{"content":"<h2 id=\"appbase-namespaces\">Namespaces</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"NAMESPACES"},{"content":"<h3 id=\"appbase-namespaces-ns\">ns()</h3><p>Get the namespace reference with the passed <em>string identifier</em>. It creates a new namespace if one doesn’t already exist, else returns reference to the existing namespace. See <em>Namespace Reference</em> docs for how namespaces work.</p><p><strong>Usage</strong></p><p><code>Appbase.ns(namespace)</code></p><ul>\n<li><strong>namespace</strong> <code>String</code> — Namespace identifier (can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.)</li>\n</ul><p><strong>Returns</strong></p><p><code>Object</code> <strong>nsref</strong> <em>Namespace Reference</em></p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"ns()"},{"content":"<h2 id=\"appbase-fantastic-search\">Fantastic Search</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"FANTASTIC SEARCH"},{"content":"<h3 id=\"appbase-fantastic-search-rawsearch\">rawSearch()</h3><p>Appbase uses ElasticSearch in the backend. To completely understand how it works, please refer to <a href=\"http://docs.appbase.io/docs/elasticsearch.html\">this page</a>.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"rawSearch()"},{"content":"<h2 id=\"appbase-utility\">Utility</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"UTILITY"},{"content":"<h3 id=\"appbase-utility-uuid\">uuid()</h3><p>Returns a 32-character uuid.</p><p><strong>Usage</strong></p><p><code>Appbase.uuid()</code></p><p><strong>Returns</strong></p><p><code>String</code> UUID</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"uuid()"},{"content":"<h3 id=\"appbase-utility-servertime\">serverTime()</h3><p>Obtain the current time in <em>milliseconds</em> since epoch.</p><p><strong>Usage</strong></p><p><code>Appbase.serverTime(onComplete)</code></p><ul>\n<li><p><strong>onComplete</strong> <code>Function</code> will be passed with two arguments.</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>serverTime()</code> returns successfully.</li>\n<li><strong>time</strong> <code>Number</code> — the current time of server in  milliseconds since epoch</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> will be passed with two arguments.</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>serverTime()</code> returns successfully.</li>\n<li><strong>time</strong> <code>Number</code> — the current time of server in  milliseconds since epoch</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"serverTime()"},{"content":"<h1 id=\"namespace-reference\">Namespace Reference</h1><p>Namespace Reference Object or <code>nsref</code> has methods for creating vertices, searching vertices, and event listeners to the addition and removal of vertices.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"NAMESPACE REFERENCE"},{"content":"<h2 id=\"namespace-reference-vertices\">Vertices</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"VERTICES"},{"content":"<h3 id=\"namespace-reference-vertices-v\">v()</h3><p>Creates a new vertex or obtains a reference to an existing vertex.</p><p><strong>Usage</strong></p><p><code>nsref.v(path)</code></p><ul>\n<li><strong>path</strong> <code>String</code> — Relative path of the vertex reference. If creating a new vertex, this is the vertex identifier. <code>/</code> character is used for separating path variables. The path can contain all ascii characters except for whitespaces, ‘:’, and ‘~’.</li>\n</ul><p><strong>Returns</strong></p><p><strong>vref</strong> <code>Object</code> <em>Vertex Reference</em></p><p><code>Note:</code> Use a string identifier if you are creating a new vertex. A new vertex cannot be created recursively, avoid using non-existent paths.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"v()"},{"content":"<h2 id=\"namespace-reference-search\">Search</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"SEARCH"},{"content":"<h3 id=\"namespace-reference-search-search\">search()</h3><p>Powerful realtime search on vertices inside a namespace, with options to search using one or more data properties. It returns not just matched strings, but all the matching vertices.</p><p><strong>Note:</strong> Search has to be manually enabled on the namesapces using the <a href=\"http://appbase.io/developer\">Developer Dashboard</a>.</p><p><strong>Usage</strong></p><p><code>nsref.search(queryObj, onComplete)</code></p><ul>\n<li><p><strong>queryObj</strong> <code>Object</code> — A Javascript Object containing the following fields and values</p>\n<ul>\n<li><strong>text</strong> <code>String</code> — Search query string</li>\n<li><strong>properties</strong> <code>Array</code> — One or more properties on which to apply the search.</li>\n</ul>\n</li>\n<li><p><strong>onComplete</strong> <code>Function</code> — will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if event listening is successful</li>\n<li><strong>results</strong> <code>Array</code> — Search results as an Array of matching vertices.</li>\n</ul>\n</li>\n</ul><p><strong>queryObj</strong> <code>Object</code> — A Javascript Object containing the following fields and values</p><ul>\n<li><strong>text</strong> <code>String</code> — Search query string</li>\n<li><strong>properties</strong> <code>Array</code> — One or more properties on which to apply the search.</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> — will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if event listening is successful</li>\n<li><strong>results</strong> <code>Array</code> — Search results as an Array of matching vertices.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"search()"},{"content":"<h2 id=\"namespace-reference-retrieving-data\">Retrieving Data</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"RETRIEVING DATA"},{"content":"<h3 id=\"namespace-reference-retrieving-data-on\">on()</h3><p>Retrieve existing vertices, and listen to addition or removal of vertices.</p><p><strong>Usage</strong></p><p><code>nsref.on(eventType , callback [, onComplete])</code></p><ul>\n<li><strong>eventType</strong> <code>String</code> — Either “vertex_added” or “vertex_removed”</li>\n<li><p><strong>callback</strong> <code>Function</code> (optional) — is called when with existing vertices, and when ever a new vertex is added. It will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if event listening is successful</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> — of the newly added vertex.</li>\n<li><strong>snapObj</strong> <code>Property Snapshot</code> — Snapshot of the data stored in the vertex. Take a look at the documentation of <code>Property Snapshot</code> on this page</li>\n</ul>\n</li>\n<li><p><strong>onComplete</strong> <code>Function</code> - Called when all the existing vertices have been retrieved. It will be called only once, with arguments:</p>\n<ul>\n<li><strong>nsref</strong> <code>Namespace Reference</code> — of the vertex where the edge is added.</li>\n</ul>\n</li>\n</ul><p><strong>callback</strong> <code>Function</code> (optional) — is called when with existing vertices, and when ever a new vertex is added. It will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if event listening is successful</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> — of the newly added vertex.</li>\n<li><strong>snapObj</strong> <code>Property Snapshot</code> — Snapshot of the data stored in the vertex. Take a look at the documentation of <code>Property Snapshot</code> on this page</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> - Called when all the existing vertices have been retrieved. It will be called only once, with arguments:</p><ul>\n<li><strong>nsref</strong> <code>Namespace Reference</code> — of the vertex where the edge is added.</li>\n</ul><p><code>Note:</code> <code>vertex_added</code> event listener returns the existing vertices in the namespace when listening for the first time.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"on()"},{"content":"<h3 id=\"namespace-reference-retrieving-data-off\">off()</h3><p>Turn off the listeners on a given namespace reference.</p><p><code>nsref.off([eventType])</code></p><ul>\n<li><strong>eventType</strong> <code>String</code> (optional) — Either “vertex_added” or “vertex_removed”. Turns off all listeners on the reference if this argument is not passed.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"off()"},{"content":"<h2 id=\"namespace-reference-utility\">Utility</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"UTILITY"},{"content":"<h3 id=\"namespace-reference-utility-name\">name()</h3><p>Returns the name of the current reference.</p><p><strong>Usage</strong></p><p><code>nsref.name()</code></p><p><strong>Returns</strong></p><p><strong>name</strong> <code>String</code> Name of the <code>nsref</code>.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"name()"},{"content":"<h3 id=\"namespace-reference-utility-path\">path()</h3><p>Returns the path of the current reference.</p><p><strong>Usage</strong></p><p><code>nsref.path()</code></p><p>The method accepts no arguments, and returns a path of the <code>nsref</code> resource. Since namespaces are top-level objects, the path for a namespace is just the <em>namesapce identifier</em>.</p><p><strong>Returns</strong></p><p><strong>path</strong> <code>String</code> Path of the <code>nsref</code> is usually the namespace identifier.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"path()"},{"content":"<h3 id=\"namespace-reference-utility-url\">URL()</h3><p>Appbase URL of the current reference.</p><p><strong>Usage</strong></p><p><code>nsref.URL()</code></p><p>The method accepts no arguments, and returns a URL of the <code>nsref</code> resource.</p><p><strong>Returns</strong></p><p><strong>url</strong> <code>String</code> Data URL of the namespace reference. The format of the URL is <code>api.appbase.io/:appname/:version/namespace</code>.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"URL()"},{"content":"<h1 id=\"vertex-reference\">Vertex Reference</h1><p>Vertex Reference Object or <code>vref</code> has the methods for setting data, creating links to other vertices, and different listeners to notify about data changes, link changes, etc.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"VERTEX REFERENCE"},{"content":"<h2 id=\"vertex-reference-storing-data\">Storing Data</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"STORING DATA"},{"content":"<h3 id=\"vertex-reference-storing-data-setdata\">setData()</h3><p>Set one or more data properties on this vertex reference.</p><p><strong>Usage</strong></p><p><code>vref.setData(dataObject [, onComplete])</code></p><ul>\n<li><strong>dataObject</strong> <code>Object</code> — A valid JSON object. Can contain a nested object, or arrays.</li>\n<li><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>setData()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Object</code> — <em>Vertex Reference</em> of the vertex on which <code>setData()</code> has been applied.</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>setData()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Object</code> — <em>Vertex Reference</em> of the vertex on which <code>setData()</code> has been applied.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"setData()"},{"content":"<h3 id=\"vertex-reference-storing-data-commitdata\">commitData()</h3><p>Atomically modify properties of the vertex. Unlike setData(), which just overwrites the properties regardless of their previous values, commitData() is used to modify the existing value to a new value, ensuring there are no conflicts with other clients writing to the same location at the same time.</p><p><strong>Usage</strong></p><p><code>vref.commitData(applyFunction [, onComplete])</code></p><ul>\n<li><strong>applyFunction</strong> <code>Function</code> — is used to transform the current value into a new value. It will be passed the current data as a JSON object and it is supposed to return the new data as a JSON object. Note: only the properties defined in the new JSON object is commited to the server, others are persisted.</li>\n<li><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>commitData()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Object</code> — <em>Vertex Reference</em> of the vertex on which <code>commitData()</code> has been applied.</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>commitData()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Object</code> — <em>Vertex Reference</em> of the vertex on which <code>commitData()</code> has been applied.</li>\n</ul><p><code>applyFunction</code> is called once and the new data is sent to the server for write. If another client writes to the vertex before your new value is successfully written, the <code>applyFunction</code> will be called again with the new current value, and the write will be retried.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"commitData()"},{"content":"<h3 id=\"vertex-reference-storing-data-removedata\">removeData()</h3><p>Removes one or more data properties from this vertex reference.</p><p><strong>Usage</strong></p><p><code>vref.removeData(propertyName [, onComplete])</code></p><ul>\n<li><strong>propertyName</strong> <code>String</code> / <code>Array</code> — One or more property names to be deleted.</li>\n<li><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>removeData()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> —  of the vertex on which <code>removeData()</code> has been applied.</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>removeData()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> —  of the vertex on which <code>removeData()</code> has been applied.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"removeData()"},{"content":"<h3 id=\"vertex-reference-storing-data-setedge\">setEdge()</h3><p>Create a link to another vertex. You can optionally set priority to links.</p><p><strong>Usage</strong></p><p><code>vref.setEdge(edgeName [, outVertex, priority, onComplete])</code></p><ul>\n<li><strong>edgeName</strong> <code>String</code> — Identifier for the outVertex. The identifier can contain all ascii characters except  whitespaces, ‘:’, ‘/’ and ‘~’. You can use <code>Appbase.uuid()</code> for setting a unique identifier.</li>\n<li><strong>outVertex</strong> <code>Vertex Reference</code> (optional) — If passed, <code>setEdge()</code> will create a link from <code>vref</code> to the <code>outVertex</code>. Otherwise, it will create a new vertex and create a link from <code>vref</code> to it.</li>\n<li><strong>priority</strong> <code>Number</code> (optional) — If passed, the link will be assigned the priority. By default, the timestamp of edge creation is used as it’s priority.</li>\n<li><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed three arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>setEdge()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> — of the vertex on which <code>setEdge()</code> has been applied.</li>\n<li><strong>outVertexRef</strong> <code>Vertex Reference</code> - of the vertex which is added as an edge.</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed three arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>setEdge()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> — of the vertex on which <code>setEdge()</code> has been applied.</li>\n<li><strong>outVertexRef</strong> <code>Vertex Reference</code> - of the vertex which is added as an edge.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"setEdge()"},{"content":"<h3 id=\"vertex-reference-storing-data-removeedge\">removeEdge()</h3><p>Remove a link from the current vertex.</p><p><strong>Usage</strong></p><p><code>vref.removeEdge(edgeName [, onComplete])</code></p><ul>\n<li><strong>edgeName</strong> <code>String</code> / <code>Array</code> — One or more edge names to be deleted.</li>\n<li><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>removeEdge()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> —  of the vertex on which <code>removeEdge()</code> has been applied.</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed two arguments:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>removeEdge()</code> worked successfully.</li>\n<li><strong>vref</strong> <code>Vertex Reference</code> —  of the vertex on which <code>removeEdge()</code> has been applied.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"removeEdge()"},{"content":"<h3 id=\"vertex-reference-storing-data-destroy\">destroy()</h3><p>Destroys a vertex from Appbase. All edges pointing to this vertex are also removed. This causes <strong>vertex_removed</strong> to be fired on the namespace where this vertex belongs.</p><p><strong>Usage</strong></p><p><code>vref.destroy([, onComplete])</code></p><ul>\n<li><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed the argument:</p>\n<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>removeEdge()</code> worked successfully.</li>\n</ul>\n</li>\n</ul><p><strong>onComplete</strong> <code>Function</code> (optional) — will be passed the argument:</p><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if <code>removeEdge()</code> worked successfully.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"destroy()"},{"content":"<h2 id=\"vertex-reference-retrieving-data\">Retrieving Data</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"RETRIEVING DATA"},{"content":"<h3 id=\"vertex-reference-retrieving-data-onproperties\">on(‘properties’)</h3><p>Fetch current properties, and listen to changes in the properties of a vertex.</p><p><strong>Usage</strong></p><p><code>vref.on('properties', callback)</code></p><ul>\n<li><strong>callback</strong> <code>Function</code> —- will be passed these as arguments:<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if :function-name:<code>on('properties')</code> listening is successful</li>\n<li><strong>abref</strong> <code>Appbase Vertex Reference</code> — points to the path on which the event is fired</li>\n<li><strong>snapObj</strong> <code>Property Snapshot</code> — Snapshot of the data stored in the vertex. Take a look at the documentation of <code>Property Snapshot</code> on this page</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> — <em>String</em> containing the error message, <em>null</em> if :function-name:<code>on('properties')</code> listening is successful</li>\n<li><strong>abref</strong> <code>Appbase Vertex Reference</code> — points to the path on which the event is fired</li>\n<li><strong>snapObj</strong> <code>Property Snapshot</code> — Snapshot of the data stored in the vertex. Take a look at the documentation of <code>Property Snapshot</code> on this page</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"on(‘properties’)"},{"content":"<h3 id=\"vertex-reference-retrieving-data-onceproperties\">once(‘properties’)</h3><p>As the name suggests, it works exactly like <code>on(\"properties\")</code> except that it will be fired only once. When you want to fetch only the current properties and don’t want to listen to changes, you can use <code>once()</code>.</p><p><strong>Usage</strong></p><p><code>vref.once('properties', callback)</code></p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"once(‘properties’)"},{"content":"<h3 id=\"vertex-reference-retrieving-data-onedge_added\">on(‘edge_added’)</h3><p>Get existing edges added at a location, and listen to new ones.</p><p><strong>Usage</strong></p><p><code>vref.on('edge_added' [, filters ],  callback [, onComplete])</code></p><ul>\n<li><strong>filters</strong> <code>JSON Object</code> - Allows filtering of edges, and supports <code>startAt</code>, <code>endAt</code>, <code>limit</code>, <code>skip</code> and <code>onlyNew</code> filters</li>\n<li><strong>callback</strong> <code>Function</code> - will be passed these as arguments:<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code></li>\n<li><strong>edgeRef</strong> <code>Appbase Vertex Reference</code> - pointing to path of the edge</li>\n<li><strong>snapObj</strong> <code>Edge Snapshot</code> - Snapshot of the edge. Take a look at the documentation of <code>Edge Snapshot</code> on this page</li>\n</ul>\n</li>\n<li><strong>onComplete</strong> <code>Function</code> - Called when all the existing edges have been retrieved. It will be called only once, with argments:<ul>\n<li><strong>vref</strong> <code>Vertex reference</code> - of the vertex where edges are being added</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code></li>\n<li><strong>edgeRef</strong> <code>Appbase Vertex Reference</code> - pointing to path of the edge</li>\n<li><strong>snapObj</strong> <code>Edge Snapshot</code> - Snapshot of the edge. Take a look at the documentation of <code>Edge Snapshot</code> on this page</li>\n</ul><ul>\n<li><strong>vref</strong> <code>Vertex reference</code> - of the vertex where edges are being added</li>\n</ul><p>With edge filters, it is possible to fetch only certain edges. It comes handy when there are large number of edges and you want to paginate them.</p><p>When more than one filter is provided, they work as logical <code>AND</code> and only the edges matchihg all filters will be fetched. This is what each filter means:</p><p>Notice that:</p><ul>\n<li>Filters are a way to fetch existing edges, thus they work only with _edge<em>added</em> event</li>\n<li>Edges are always returned ordered according to their priorities</li>\n<li>When <em>endAt</em> &lt; <em>startAt</em>, edges are returned in reverse order</li>\n<li>You can NOT apply all the numeric filters (first four) to newly created edges, they are only for existing edges and it is NOT possible to apply filters to newly created edges in realtime<ul>\n<li>This means that the numeric filters can not be used with <em>onlyNew</em> set to be <code>true</code></li>\n<li><em>Newly created</em> edges will NOT be fired when any of the numeric filter is applied, i.e. only the existing edges will be returned</li>\n</ul>\n</li>\n</ul><ul>\n<li>This means that the numeric filters can not be used with <em>onlyNew</em> set to be <code>true</code></li>\n<li><em>Newly created</em> edges will NOT be fired when any of the numeric filter is applied, i.e. only the existing edges will be returned</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"on(‘edge_added’)"},{"content":"<h3 id=\"vertex-reference-retrieving-data-onedge_removed\">on(‘edge_removed’)</h3><p>Listen to removal of edges. </p><p><strong>Usage</strong></p><p><code>vref.on('edge_removed', callback)</code></p><ul>\n<li><strong>callback</strong> <code>Function</code> - will be passed these as arguments:<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> —</li>\n<li><strong>edgeRef</strong> <code>Appbase Vertex Reference</code> - pointing to path of the edge.</li>\n<li><strong>snapObj</strong> <code>Edge Snapshot</code> - Snapshot of the edge. Take a look at the documentation of <code>Edge Snapshot</code> on this page</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> —</li>\n<li><strong>edgeRef</strong> <code>Appbase Vertex Reference</code> - pointing to path of the edge.</li>\n<li><strong>snapObj</strong> <code>Edge Snapshot</code> - Snapshot of the edge. Take a look at the documentation of <code>Edge Snapshot</code> on this page</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"on(‘edge_removed’)"},{"content":"<h3 id=\"vertex-reference-retrieving-data-onedge_changed\">on(‘edge_changed’)</h3><p>When ever an edge is replaced, i.e. <code>setEdge()</code> is called with an existing edge name, this event is fired.</p><p><strong>Usage</strong></p><p><code>vref.on('edge_changed', callback)</code></p><ul>\n<li><strong>callback</strong> <code>Function</code> - will be passed these as arguments:<ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> —</li>\n<li><strong>edgeRef</strong> <code>Appbase Vertex Reference</code> - pointing to path of the edge.</li>\n<li><strong>snapObj</strong> <code>Edge Snapshot</code> - Snapshot of the edge. Take a look at the documentation of <code>Edge Snapshot</code> on this page</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>error</strong> <code>String</code> / <code>null</code> —</li>\n<li><strong>edgeRef</strong> <code>Appbase Vertex Reference</code> - pointing to path of the edge.</li>\n<li><strong>snapObj</strong> <code>Edge Snapshot</code> - Snapshot of the edge. Take a look at the documentation of <code>Edge Snapshot</code> on this page</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"on(‘edge_changed’)"},{"content":"<h2 id=\"vertex-reference-utility\">Utility</h2>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"UTILITY"},{"content":"<h3 id=\"vertex-reference-utility-outvertex\">outVertex()</h3><p>Reference to the corresponding <code>outVertex</code> with the given name.</p><p><strong>Usage</strong></p><p><code>vref.outVertex(edgeName)</code></p><ul>\n<li><strong>edgeName</strong> <code>String</code> — outVertex identifier.</li>\n</ul><p><strong>Returns</strong></p><ul>\n<li><strong>vref</strong> <code>Vertex Reference</code> of the outVertex.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"outVertex()"},{"content":"<h3 id=\"vertex-reference-utility-invertex\">inVertex()</h3><p>Reference to the corresponding <code>inVertex</code> from the current vertex.</p><p><strong>Usage</strong></p><p><code>vref.inVertex()</code></p><p><code>Note:</code> Since vertices are accessed via a path, there is only one <code>inVertex</code> for each vertex. Calling this method on the root vertex such as ``Appbase.ns(“Domains”).v(“www.appbase.io”) will thrown an error.</p><p><strong>Returns</strong></p><ul>\n<li><strong>vref</strong> <code>Vertex Reference</code> of the inVertex.</li>\n</ul>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"inVertex()"},{"content":"<h3 id=\"vertex-reference-utility-path\">path()</h3><p>Returns the path of the current reference.</p><p><strong>Usage</strong></p><p><code>vref.path()</code></p><p>The method accepts no arguments, and returns a path of the <code>vref</code> resource.</p><p><strong>Returns</strong></p><p><strong>path</strong> <code>String</code> Path of the <code>vref</code> is a UNIX style path of the format namespace/:vertex1/:vertex2/vref.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"path()"},{"content":"<h3 id=\"vertex-reference-utility-name\">name()</h3><p>Returns the name of the current reference.</p><p><strong>Usage</strong></p><p><code>vref.name()</code></p><p><strong>Returns</strong></p><p><strong>name</strong> <code>String</code> Name of the <code>vref</code>.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"name()"},{"content":"<h3 id=\"vertex-reference-utility-url\">URL()</h3><p>Appbase URL of the current reference.</p><p><strong>Usage</strong></p><p><code>vref.URL()</code></p><p>The method accepts no arguments, and returns a URL of the <code>vref</code> resource.</p><p><strong>Returns</strong></p><p><strong>url</strong> <code>String</code> Data URL of the namespace reference. The format of the URL is <code>api.appbase.io/:appname/:version/ns/:vertex1/:vertex2</code>.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"URL()"},{"content":"<h1 id=\"data-snapshots\">Data Snapshots</h1><p>Data snapshots are immutable copies of the data stored at <code>Appbase References</code><em>. There are two kinds of snapshots: <code>Property Snapshot</code></em> and <code>Edge Snapshot</code>_, fired when listening to on(‘properties’) or one of the edge listeners.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"DATA SNAPSHOTS"},{"content":"<h3 id=\"data-snapshots-property-snapshot\">Property Snapshot</h3><p>It holds the property data of a vertex in Appbase. It has the following methods to obtain the changes in the Appbase Reference.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"Property Snapshot"},{"content":"<h3 id=\"data-snapshots-edge-snapshot\">Edge Snapshot</h3><p>It holds the edge data. It has the following methods to obtain the edge related changes in the Appbase Reference.</p>","link":"./v2.0/javascript/api-reference.html","spaLink":"#/v2.0/javascript/api-reference","title":"Edge Snapshot"},{"content":"<h1 id=\"steps-to-getting-started-with-appbase\">Steps to getting started with Appbase</h1>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEPS TO GETTING STARTED WITH APPBASE"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-0-get-appbase\">Step 0: Get Appbase</h2><p>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"http://appbase.io/developer/\">Appbase Dashboard</a>, and create a new app.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 0: GET APPBASE"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-1-add-the-appbase-js-library\">Step 1: Add the Appbase JS Library</h2><p>Add Appbase library to your codebase and set the app credentials as they appear here.</p><p>Note: You will want to change the parameters of the <code>Appbase.credentials()</code> method to your own app name, app secret combination, as seen in the <a href=\"http://appbase.io/developer\">Dashboard</a>.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 1: ADD THE APPBASE JS LIBRARY"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-2-creating-vertices\">Step 2: Creating Vertices</h2><p>Now let’s create two Appbase vertices under two different namespaces “user” and “tweets”.</p><p>Namespaces are containers that do not hold actual data, but help with data logic separation. A “vertex” can only be created using a ns reference object.</p><p>As seen here, vertex takes a “String” as an identifier. <code>Appbase.uuid()</code> is a handy way for creating a unique String id.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 2: CREATING VERTICES"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-3-storing-some-data\">Step 3: Storing some Data</h2><p>A vertex can store data as a JSON object using the <code>setData()</code> method.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 3: STORING SOME DATA"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-4-creating-a-simple-data-model\">Step 4: Creating a simple data model</h2><p>Vertices can be connected via edges. Now let’s add the <code>tweetRef</code> as an edge to the <code>userRef</code> vertex.</p><p>Now, the tweetRef vertex can also be accessed using the path /user/andy/tweeted. To retrieve a vertex reference at a given path, <code>ns.v(path)</code> is a handy method.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 4: CREATING A SIMPLE DATA MODEL"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-5-retrieving-data-in-real-time\">Step 5: Retrieving data, in real-time!</h2><p>Appbase supports retrieval of objects using realtime streams. We will now add listeners, which return existing data stored, and keeps returning new data as it keeps changing. Similarly we will add a listener for retrieving edges on the vertex.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 5: RETRIEVING DATA, IN REAL-TIME!"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-step-6-smart-search\">Step 6: Smart search</h2><p>Appbase supports a full-text smart search, and you can enable it in two simple steps.</p><p>Enable the search by toggling the <i class=\"fa fa-eye-slash\"></i> switch in your app’s preferred namespace. If search is enabled, you should see this icon <i class=\"fa fa-eye\"></i> next to the namespace.\nSecond and final step, use this code snippet on the enabled namespace and have a full-text search widget.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"STEP 6: SMART SEARCH"},{"content":"<h2 id=\"steps-to-getting-started-with-appbase-further\">Further</h2><p>If you are using Appbase from a Javascript client, you might want to use user authentications over secret. Checkout <a href=\"/docs/authentications.html\">here</a> for more.</p><p>As a next step, you should checkout the <a href=\"/docs/js.html\">Javascript API reference</a> for an in-depth usage guide.</p>","link":"./v2.0/javascript/quick-start.html","spaLink":"#/v2.0/javascript/quick-start","title":"FURTHER"},{"content":"<h1 id=\"user-authentication\">User Authentication</h1><p>Most applications need to know the identity of a user. Knowing a user’s identity allows an app to provide a customized experience. The process of proving a user’s identity is called <em>authentication</em>.</p><p>Appbase makes authentication easy with completely client-side code. It has built-in functionality for third-party providers such as Facebook, LinkedIn, GitHub, Dropbox, and Google.</p><p>When a user authenticates to an Appbase app, the information about the user is returned in callbacks on the client device. This allows you to customize your app’s user experience for that specific user. Appbase also issues a <strong>requestObject</strong>, which makes it easy for you to access the providers’ data APIs.</p><p>Once a user authenticates to your app, Appbase manages their session, ensuring that the user is remembered across page refreshes and browser restarts.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"USER AUTHENTICATION"},{"content":"<h2 id=\"user-authentication-configuring-login\">Configuring Login</h2><p>For security reasons, only domains that you whitelist are allowed to initiate authentication for your app.  All Appbase apps have localhost and 127.0.0.1 enabled by default for local development and testing. Add more authorized origins to enable authentication from domains where your host your app.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"CONFIGURING LOGIN"},{"content":"<h2 id=\"user-authentication-enabling-providers\">Enabling Providers</h2><p>Next, you need to enable the provider that you selected for your Appbase.</p><p>Appbase is all set up for your provider. It’s time to code.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"ENABLING PROVIDERS"},{"content":"<h2 id=\"user-authentication-logging-user-in\">Logging User In</h2><p>The following code shows a popup and retrieves the user’s credentials for Appbase, and Facebook.</p><p>Appbase automatically retrieves the basic information about the user (the <em>me</em> data) from the provider, the access tokens for Appbase and the provider and present it as the <em>authObj</em>.\n<code>authObj</code> is a JSON object:</p><p>Appbase stores and uses these tokens for accessing appbase REST api, and provider’s data APIs.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"LOGGING USER IN"},{"content":"<h2 id=\"user-authentication-accessing-providers-data-apis\">Accessing provider’s data APIs</h2><p><code>requestObj</code> returned in the authentication can be used to you to perform API calls to a provider. It contains methods that wrap the usual HTTP methods: <code>.get()</code>, <code>.post()</code>, <code>.put()</code>, <code>.patch()</code>, and <code>.del()</code>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"ACCESSING PROVIDER’S DATA APIS"},{"content":"<h2 id=\"user-authentication-caching-credentials\">Caching Credentials</h2><p>Once the user logs in with a provider, the credentials are cached in localStorage automatically, and this helps staying logged in across browser restarts. To fetch these cached credentails call, <code>Appbase.getAuth()</code>.</p><p><code>getAuth()</code> saves you from calling <code>authPopup()</code> again for authenticating user when the user already went through the login flow previously. It returns the two objects described object: <em>authObj</em> and <em>requestObj</em>. If user is not authenticated, it returns <code>null</code>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"CACHING CREDENTIALS"},{"content":"<h2 id=\"user-authentication-dealing-with-popups-and-redirects\">Dealing with Popups and Redirects</h2><p>Appbase supports two different ways to authenticate with OAuth providers - via pop-up, or browser redirect.</p><p>Third-party authentication methods use a browser pop-up window, or browser redirect, to prompt the user to sign-in, approve the application, and return the user’s data to the requesting application.</p><p>Most modern browsers block pop-up windows unless they are invoked by direct user action. Therefore, we should only invoke the <code>authPopup()</code> method for third-party authentication upon the user’s click, otherwise <code>authRedirect()</code> should be used.</p><p><code>authRedirect()</code> redirects to the provider’s login page, where the user can accept your app’s permissions. Once he has, he is redirected to the callback url.</p><p>After this call, at the page where the redirect URL points, call <code>authCallback()</code>, which allows you to retrieve the credentials.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"DEALING WITH POPUPS AND REDIRECTS"},{"content":"<h2 id=\"user-authentication-working-with-scopes-and-additional-parameters\">Working with Scopes, and additional parameters</h2><p>Providers require different scope parameters, to access the user’s data on their APIs. \nFor eg. </p><ul>\n<li>The scope <em>openid</em> is required for Google, in order to retrieve the user’s ID and basic information, otherwise, user’s id is not accessible and <code>Appbase.authPopup()</code> will throw  error: “user’s id not present”.</li>\n<li>LinkedIn requires <em>r_emailaddress</em> scope, to access the email address of the user. Without specifying this scope, the <code>authObj</code> will not contain <em>email</em> field.</li>\n</ul><p>Providers might even require additional parameters, which can be defined in the options to <code>Appbase.authPopup()</code> ,along with the <em>scope</em>:</p><p>Findout the different configurations, scopes and code samples for all the providers <a href=\"/docs/auth_providers-samples.md\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"WORKING WITH SCOPES, AND ADDITIONAL PARAMETERS"},{"content":"<h2 id=\"user-authentication-logging-users-out\">Logging Users Out</h2><p>This will remove the credentials from memory and all the requests to Appbase server and, and provider’s API will fail.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"LOGGING USERS OUT"},{"content":"<h2 id=\"user-authentication-code-samples\">Code Samples</h2><p>Findout code samples for all the providers <a href=\"/docs/auth_providers-samples.md\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"CODE SAMPLES"},{"content":"<h1 id=\"authentication-additional-guide\">Authentication - additional guide</h1><p>Every provider requires Oauth paramters to be passed while authenticating. Mostly, they are the same across all providers, for eg. redirect_url, token_type, client_id etc. Appbase takes care of these paramters, except for some cases, which depends on the developer’s need. This document explains how to provide these paramters while authenticating with Appbase and a provider, plus provides links to provider’s additional documentation.</p><p>You can directly use the code snippets given here for a provider, and the authentication will work out of the box.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"AUTHENTICATION - ADDITIONAL GUIDE"},{"content":"<h2 id=\"authentication-additional-guide-scopes\">Scopes</h2><p>Scoping allows OAuth clients to tell an authorization server what permissions they’ll need on resources they’re accessing. The required scopes, can be specified while calling <code>Appbase.authPopup()</code>, and then we can access the data using <code>requestObject</code>, and calling provider’s data endpoints.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"SCOPES"},{"content":"<h2 id=\"authentication-additional-guide-google\">Google</h2>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"GOOGLE"},{"content":"<h3 id=\"authentication-additional-guide-google-required-paramters\">Required paramters</h3><ul>\n<li><strong>scope</strong>: ‘openid’, which allows us to access basic information about the user.</li>\n</ul>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Required paramters"},{"content":"<h3 id=\"authentication-additional-guide-google-minimal-code\">Minimal Code</h3>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Minimal Code"},{"content":"<h3 id=\"authentication-additional-guide-google-additional-docs\">Additional docs</h3><p>Find out more about scopes and API endpoints supported by Google <a href=\"https://developers.google.com/+/api/oauth#scopes\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Additional docs"},{"content":"<h3 id=\"authentication-additional-guide-google-calling-apis\">Calling APIs</h3>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Calling APIs"},{"content":"<h2 id=\"authentication-additional-guide-facebook\">Facebook</h2>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"FACEBOOK"},{"content":"<h3 id=\"authentication-additional-guide-facebook-minimal-code\">Minimal Code</h3>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Minimal Code"},{"content":"<h3 id=\"authentication-additional-guide-facebook-additional-docs\">Additional docs</h3><p>Find out more about scopes and API endpoints supported by Facebook <a href=\"https://developers.facebook.com/docs/facebook-login/permissions/v2.1\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Additional docs"},{"content":"<h2 id=\"authentication-additional-guide-linkedin\">LinkedIn</h2>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"LINKEDIN"},{"content":"<h3 id=\"authentication-additional-guide-linkedin-minimal-code\">Minimal Code</h3>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Minimal Code"},{"content":"<h3 id=\"authentication-additional-guide-linkedin-additional-docs\">Additional docs</h3><p>Find out more about scopes and API endpoints supported by LinkedIn <a href=\"https://developer.linkedin.com/documents/authentication#granting\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Additional docs"},{"content":"<h2 id=\"authentication-additional-guide-github\">Github</h2>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"GITHUB"},{"content":"<h3 id=\"authentication-additional-guide-github-minimal-code\">Minimal Code</h3>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Minimal Code"},{"content":"<h3 id=\"authentication-additional-guide-github-additional-docs\">Additional docs</h3><p>Find out more about scopes and API endpoints supported by Github <a href=\"https://developer.github.com/v3/oauth/#scopes\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Additional docs"},{"content":"<h2 id=\"authentication-additional-guide-dropbox\">Dropbox</h2>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"DROPBOX"},{"content":"<h3 id=\"authentication-additional-guide-dropbox-minimal-code\">Minimal Code</h3>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Minimal Code"},{"content":"<h3 id=\"authentication-additional-guide-dropbox-additional-docs\">Additional docs</h3><p>Find out more about API endpoints supported by Dropbox <a href=\"https://www.dropbox.com/developers/core/docs#account-info\">here</a>.</p>","link":"./v2.0/javascript/oauth.html","spaLink":"#/v2.0/javascript/oauth","title":"Additional docs"},{"content":"<h1 id=\"searching-for-a-better-search\">Searching for a better Search?</h1><p>Building a good quality full-text search experience for an app is a hard problem if your data resides in traditional RDBMS systems. Even database systems like MongoDB have very nascent support for search, others like DynamoDB offer no support. The hard, real fact is that these systems are not designed with search as a use-case, and one is left with a very rudimentary support like exact search match, or in the worst case scenario, even scanning the DB tables.</p><p>While there are great tools available for search, like Apache Solr and Elasticsearch, they have two big problems:  </p><p>We have thought about the <strong>Search</strong> problem really hard, and have come up with an elegant solution.</p>","link":"./v2.0/search/quick-start.html","spaLink":"#/v2.0/search/quick-start","title":"SEARCHING FOR A BETTER SEARCH?"},{"content":"<h2 id=\"searching-for-a-better-search-our-approach-to-search\">Our Approach to Search</h2><p>Appbase takes the search problem head-on and indexes all the data that is ever stored in Appbase, allowing searching on all the data and relationships. We provide the ability to do the following kind of queries:  </p><p>With <a href=\"http://docs.appbase.io/docs/elasticsearch.html#-searching-aggregation\">Aggregation</a> and <a href=\"http://docs.appbase.io/docs/elasticsearch.html#-searching-combining-queries-filters\">Combining queries</a>, the possibilities are endless.</p><p>Here’s a primer to leverage these powerful search queries broken into three steps.</p>","link":"./v2.0/search/quick-start.html","spaLink":"#/v2.0/search/quick-start","title":"OUR APPROACH TO SEARCH"},{"content":"<h3 id=\"searching-for-a-better-search-our-approach-to-search-1-create-an-app\">1. Create an App</h3><p>Log into <span class=\"fa fa-external-link\"></span><a href=\"https://appbase.io/developer/\">Appbase Dashboard</a>, and create a new app. Once you create an app with a desired name, you should see an app dialog box appear as below.</p><p><img src=\"http://i.imgur.com/LBjXQQT.png\" alt=\"App credentials\"><br><strong>Image 1</strong>: App name, credentials, and access controls  </p><p>We will need the <code>app name</code> and the <code>secret</code> in all our API calls. In this case, these would be <em>my_app9</em> and <em>097b2b28b6a13cf2e53b6cecfec42b86</em>. We <strong>trust you</strong> with our app’s secret!</p>","link":"./v2.0/search/quick-start.html","spaLink":"#/v2.0/search/quick-start","title":"1. Create an App"},{"content":"<h3 id=\"searching-for-a-better-search-our-approach-to-search-2-put-some-data\">2. Put some Data</h3><p>Appbase works with JSON data. You can store JSON objects with Appbase directly, they would form Appbase vertices (similar to MongoDB documents, or RDBMS records). We can make search requests on all the vertices, or a set of vertices via a JSON based query format (using ElasticSearch’s DSL).</p><p>For brevity, let’s suppose we are storing user profiles and would like to later search them by different properties. Here’s how a JSON user object might look: </p><p>To store this data with Appbase, we will make a <em>PATCH</em> request via REST. You can read more about them in our <a href=\"http://docs.appbase.io/docs/rest.html#api-reference-vertex-property-create-update-vertex-properties\">REST API</a>. Here’s how the request would like in our case:</p><p>When you copy the above code, be sure to replace the <code>Appbase-Secret</code> header and the <code>app name</code> in the URL to your credentials.</p><p><em>Understanding the Request</em></p><p>To store data, we do a <strong>PATCH</strong> request.</p><ul>\n<li><p>URL: <a href=\"https://api.appbase.io/my_app9/v2/people/laura/~properties\">https://api.appbase.io/my_app9/v2/people/laura/~properties</a>, where</p>\n<ul>\n<li><code>https://api.appbase.io</code> - Appbase REST API base URL</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>v2</code> - the current Appbase REST API version (<code>v2</code> for all API requests)</li>\n<li><code>people</code> - the namespace identifer (An Appbase namespace is similar to a collection in MongoDB, or a table in RDBMS)</li>\n<li><code>laura</code> - the vertex identifier (An Appbase vertex is similar to a document ID in MongoDB, or a primary key inside RDBMS)</li>\n<li><code>~properties</code> - the resource endpoint for the vertex <code>laura</code> to patch (depending on the operation, this could be either <code>~properties</code>, <code>~edges</code>, <code>~search</code>, etc.)</li>\n</ul>\n</li>\n<li><p>Headers\nHeaders in this request include the <code>Appbase-Secret</code> value and <code>Content-Type</code> as JSON.</p>\n</li>\n</ul><p>URL: <a href=\"https://api.appbase.io/my_app9/v2/people/laura/~properties\">https://api.appbase.io/my_app9/v2/people/laura/~properties</a>, where</p><ul>\n<li><code>https://api.appbase.io</code> - Appbase REST API base URL</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>v2</code> - the current Appbase REST API version (<code>v2</code> for all API requests)</li>\n<li><code>people</code> - the namespace identifer (An Appbase namespace is similar to a collection in MongoDB, or a table in RDBMS)</li>\n<li><code>laura</code> - the vertex identifier (An Appbase vertex is similar to a document ID in MongoDB, or a primary key inside RDBMS)</li>\n<li><code>~properties</code> - the resource endpoint for the vertex <code>laura</code> to patch (depending on the operation, this could be either <code>~properties</code>, <code>~edges</code>, <code>~search</code>, etc.)</li>\n</ul><p>Headers\nHeaders in this request include the <code>Appbase-Secret</code> value and <code>Content-Type</code> as JSON.</p>","link":"./v2.0/search/quick-start.html","spaLink":"#/v2.0/search/quick-start","title":"2. Put some Data"},{"content":"<h3 id=\"searching-for-a-better-search-our-approach-to-search-3-perform-search-on-data\">3. Perform Search on Data</h3><p>Now that we have successfully stored data, let’s perform a full-text search.</p><p>Before that, just a small setup in the dashboard to enable search. </p><p><img src=\"http://i.imgur.com/LBjXQQT.png\" alt=\"Select &quot;Data Browser&quot; View\"><br><strong>Image 2</strong>: Select the “Data Browser” view (3rd option).</p><p><img src=\"http://i.imgur.com/dUBq2fw.png\" alt=\"Enable Search View\"><br><strong>Image 3</strong>: Ensure search is enabled on the “people” namespace.</p><p>Inside the databrowser view, enable <strong>Search</strong>. The eye icon should appear <span style=\"color:green;\">green</span>, once the search is enabled.</p><p>Now we are all set to perform a “search” query. Let’s search for users whose occupation is being a <em>designer</em>.</p><p>The response that you get from Appbase is an array of JSON objects which match the criteria.</p><p>Response: </p><p>There you go! Appbase’s search fetches results which are close to the search term, and you get the following object in response.</p><p><em>Understanding the Request</em> </p><p>To perform a search, we do a <strong>POST</strong> request.</p><ul>\n<li><p>URL: <a href=\"https://api.appbase.io/my_app9/v2/people/~search\">https://api.appbase.io/my_app9/v2/people/~search</a>, where</p>\n<ul>\n<li><code>https://api.appbase.io</code> - Appbase REST API base URL</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>v2</code> - the current Appbase REST API version (<code>v2</code> for all API requests)</li>\n<li><code>people</code> - the namespace identifer (An Appbase namespace is similar to a collection in MongoDB, or a table in RDBMS)</li>\n<li><code>~search</code> - the resource endpoint indicating our query intent (<code>search</code> in this case, and <code>properties</code> in the previous step).</li>\n</ul>\n</li>\n<li><p>Request Headers\nHeaders are always the same for all REST API requests.</p>\n</li>\n<li><p>Request Body\nThe JSON query object that we send with this request:</p>\n<pre><code class=\"lang-json prettyprint prettyprinted\" style=\"\"><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">\"query\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"string\"><span class=\"str\">\"text\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">\"designer\"</span></span><span class=\"pun\">,</span><span class=\"pln\">\n      </span><span class=\"string\"><span class=\"str\">\"properties\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"string\"><span class=\"str\">\"occupation\"</span></span><span class=\"pun\">]</span><span class=\"pln\">\n  </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<ul>\n<li><code>text</code>: The search query string</li>\n<li><code>properties</code>: The list of the properties whose value should match the search string</li>\n</ul>\n</li>\n</ul><p>URL: <a href=\"https://api.appbase.io/my_app9/v2/people/~search\">https://api.appbase.io/my_app9/v2/people/~search</a>, where</p><ul>\n<li><code>https://api.appbase.io</code> - Appbase REST API base URL</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>v2</code> - the current Appbase REST API version (<code>v2</code> for all API requests)</li>\n<li><code>people</code> - the namespace identifer (An Appbase namespace is similar to a collection in MongoDB, or a table in RDBMS)</li>\n<li><code>~search</code> - the resource endpoint indicating our query intent (<code>search</code> in this case, and <code>properties</code> in the previous step).</li>\n</ul><p>Request Headers\nHeaders are always the same for all REST API requests.</p><p>Request Body\nThe JSON query object that we send with this request:</p><ul>\n<li><code>text</code>: The search query string</li>\n<li><code>properties</code>: The list of the properties whose value should match the search string</li>\n</ul><p>That’s it! In less than 10 minutes, we were able to add production grade search in your app.</p>","link":"./v2.0/search/quick-start.html","spaLink":"#/v2.0/search/quick-start","title":"3. Perform Search on Data"},{"content":"<h2 id=\"searching-for-a-better-search-next-steps\">Next Steps</h2><p>Do you want to customize the ‘fuzziness’ of your search? Or perhaps apply multiple queries and filter the data at the same time. If this has whetted your appetite, check out our main “search” course on the <a href=\"http://docs.appbase.io/#/v2.0/search/use-cases\">ElasticSearch documentation</a>.</p>","link":"./v2.0/search/quick-start.html","spaLink":"#/v2.0/search/quick-start","title":"NEXT STEPS"},{"content":"<h1 id=\"introduction\">Introduction</h1><p>The Appbase API is based on REST principles. All operations including creating vertices and edges, fetching vertex properties (data) and edges, deleting a vertex or an edge as well as searching through vertices are RESTful. The only non-RESTful operation is realtime event streams, which works with the Websocket protocol, using socket.io.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"INTRODUCTION"},{"content":"<h3 id=\"introduction-allowed-http-request-types\">Allowed HTTP Request Types</h3><ul>\n<li><code>PATCH</code> - Creates or updates a resource</li>\n<li><code>POST</code> - Fetches a resource</li>\n<li><code>DELETE</code> - Delete a resource</li>\n</ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Allowed HTTP Request Types"},{"content":"<h3 id=\"introduction-http-headers\">HTTP Header(s)</h3><p>All API requests require a JSON body to specify additional options. The following header is necessary for all the API requests.</p><p>“Content-Type”: “application/json”</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"HTTP Header(s)"},{"content":"<h3 id=\"introduction-authorization\">Authorization</h3><p>Appbase accepts one of the two methods of authorizations.</p><p>In this document, we will be using the 1. method since it makes authorization distinct from the request data.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Authorization"},{"content":"<h3 id=\"introduction-base-uri\">Base URI</h3><p>Base URI is the fixed URI that is common for all the API request endpoints and is prefix to all the API requests. A base URI has two path variables: <strong>appname</strong> and <strong>api_version</strong>. A typical base URI looks like <a href=\"https://api.appbase.io/&lt;appname&gt;/v2/\">https://api.appbase.io/&lt;appname&gt;/v2/</a>.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Base URI"},{"content":"<h1 id=\"api-reference\">API Reference</h1>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"API REFERENCE"},{"content":"<h2 id=\"api-reference-introduction\">Introduction</h2><p>The Appbase API endpoints are divided between three types of different resources.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"INTRODUCTION"},{"content":"<h2 id=\"api-reference-namespace\">Namespace</h2>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"NAMESPACE"},{"content":"<h3 id=\"api-reference-namespace-list-all-vertices\">List all vertices</h3><p>List the vertices in the namespace. <em>Returns</em> an array of vertices in the namespace.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> identifier can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of vertices. Each vertex is returned as an object with a server <code>timestamp</code> when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> identifier can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of vertices. Each vertex is returned as an object with a server <code>timestamp</code> when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"List all vertices"},{"content":"<h3 id=\"api-reference-namespace-search-vertices-by-propertyies\">Search Vertices by property(ies)</h3><p>Search vertices by one or more vertex properties. <em>Returns</em> an array of vertices that match the search criteria.</p><p><code>Note:</code> Search should be enabled for the respective namespace from the databrowser interface before performing this query.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> identifier can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>data</code> - A JSON object representing the search query and the properties to be used for the matching criteria.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of vertices which match the search query. Each vertex is returned as an object with all the <strong>properties</strong> (both matching and non-matching), a server <code>timestamp</code> when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> identifier can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object representing the search query and the properties to be used for the matching criteria.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of vertices which match the search query. Each vertex is returned as an object with all the <strong>properties</strong> (both matching and non-matching), a server <code>timestamp</code> when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Search Vertices by property(ies)"},{"content":"<h2 id=\"api-reference-vertex-property\">Vertex Property</h2><p>All data operations on a vertex happen via <strong>Vertex Property</strong> endpoints.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"VERTEX PROPERTY"},{"content":"<h3 id=\"api-reference-vertex-property-create-update-vertex-properties\">Create / Update Vertex Properties</h3><p>Create a new vertex with some properties or update the properties of an existing vertex.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>data</code> - A JSON object representing the properties to be set on the vertex (can contain nested object, arrays). In case of a conflict (read existing property), the property value will be overwritten.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated properties and values, a server <code>timestamp</code> when the update happened, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object representing the properties to be set on the vertex (can contain nested object, arrays). In case of a conflict (read existing property), the property value will be overwritten.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated properties and values, a server <code>timestamp</code> when the update happened, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Create / Update Vertex Properties"},{"content":"<h3 id=\"api-reference-vertex-property-read-vertex-properties\">Read Vertex Properties</h3><p>Read the existing vertex properties.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>data</code> - A JSON object with the property <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns a <strong>vertex</strong> object with all the properties, a <code>timestamp</code> value when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally), along with an <strong>optype</strong> field equaling “RETR” - indicating a retrieval operation.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object with the property <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns a <strong>vertex</strong> object with all the properties, a <code>timestamp</code> value when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally), along with an <strong>optype</strong> field equaling “RETR” - indicating a retrieval operation.</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Read Vertex Properties"},{"content":"<h3 id=\"api-reference-vertex-property-delete-vertex-properties\">Delete vertex properties</h3><p>Delete specific (or all) data properties of a vertex.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting all properties</b>\n    <ul>\n        <li><code>data</code> - A JSON object with the property <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting specific properties</b>\n    <ul>\n        <li><code>data</code> - A JSON object with the property <code>data</code> set as an array of property names to be deleted.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns the <strong>vertex</strong> object with the deleted properties set to “”, a <code>timestamp</code> value when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object with the property <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object with the property <code>data</code> set as an array of property names to be deleted.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns the <strong>vertex</strong> object with the deleted properties set to “”, a <code>timestamp</code> value when the vertex was last updated, the shortest path to the vertex resource aka <code>rootPath</code>, and a unique identifier of the vertex properties resource <code>_id</code> (used by the server internally).</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Delete vertex properties"},{"content":"<h2 id=\"api-reference-vertex-edge\">Vertex Edge</h2>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"VERTEX EDGE"},{"content":"<h3 id=\"api-reference-vertex-edge-create-update-vertex-edges\">Create / Update Vertex Edges</h3><p>Create a new (directed) edge or update the existing edge(s) of a vertex to another vertex. An <strong>order</strong>, which acts as an index can optionally be set on the edge.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>data</code> - A JSON object representing the edge(s) to be created from the vertex. In case of a conflict (read an existing edge), the link will be updated.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated edge links to outvertices, a server <code>timestamp</code> for each edge when the update happened, and a unique identifier for each edge resource <code>t_id</code> (used by the server internally).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object representing the edge(s) to be created from the vertex. In case of a conflict (read an existing edge), the link will be updated.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated edge links to outvertices, a server <code>timestamp</code> for each edge when the update happened, and a unique identifier for each edge resource <code>t_id</code> (used by the server internally).</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Create / Update Vertex Edges"},{"content":"<h3 id=\"api-reference-vertex-edge-read-vertex-edges\">Read Vertex Edges</h3><p>Fetch the outgoing edges of a vertex..</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>filters</code> - A filters JSON object, set as {} to not apply any filters.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an <strong>edges</strong> object with the filtered edges as an array, each edge having a <code>timestamp</code> value when the edge was last updated, a unique identifier of the edge resource <code>t_id</code> (used by the server internally), along with an <code>id</code> identifier of the vertex on which this operation is performed and an <strong>optype</strong> field equaling “RETR” - indicating a retrieval operation.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>filters</code> - A filters JSON object, set as {} to not apply any filters.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an <strong>edges</strong> object with the filtered edges as an array, each edge having a <code>timestamp</code> value when the edge was last updated, a unique identifier of the edge resource <code>t_id</code> (used by the server internally), along with an <code>id</code> identifier of the vertex on which this operation is performed and an <strong>optype</strong> field equaling “RETR” - indicating a retrieval operation.</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Read Vertex Edges"},{"content":"<h3 id=\"api-reference-vertex-edge-delete-vertex-edges\">Delete vertex edges</h3><p>Delete specific (or all) edges of a vertex.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting all edges</b>\n    <ul>\n        <li><code>data</code> - A JSON object with the property <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting specific edges</b>\n    <ul>\n        <li><code>data</code> - A JSON object with the property <code>data</code> set as an array of edge names to be deleted.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>204</code> if success.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">namespace</span> - namespace identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">vertex</span> - vertex identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>namespace</em> and <em>vertex</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Content-Type - application/json (always)</li>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object with the property <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object with the property <code>data</code> set as an array of edge names to be deleted.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>204</code> if success.</li>\n    </ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Delete vertex edges"},{"content":"<h1 id=\"socketio-api-endpoints\">Socket.io API Endpoints</h1><p>Socket.io is a powerful realtime engine, and we are using it in the backend to provide realtime streams of data. Socket.io has client libraries for almost popular languages and platforms, and you can follow the API endpoints given below to fetch the data as realtime streams. Examples here use Javascript Language, but you can use the same methods on any other platform.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"SOCKET.IO API ENDPOINTS"},{"content":"<h2 id=\"socketio-api-endpoints-creating-the-client\">Creating the Client</h2><p>The API server can be reached form <code>http://api.appbase.io:80</code> or <code>https://api.appbase.io:443</code>. Make sure that the ports are properly defined in the server URL itself.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"CREATING THE CLIENT"},{"content":"<h2 id=\"socketio-api-endpoints-requesting-for-data\">Requesting for data</h2><p>As vertices and namespace are represented using paths, you request for data on a path. Vertices and Namespaces are fundamentally different, and they also differ in terms of what resources you can listen to. But, they share the same Request format, with minor changes for special cases.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"REQUESTING FOR DATA"},{"content":"<h3 id=\"socketio-api-endpoints-requesting-for-data-request-format\">Request Format</h3><p>The request object looks something like this:</p><ul>\n<li><strong>appname</strong> - The name of the application</li>\n<li><strong>secret</strong> - Application secret</li>\n<li><strong>token</strong> - Appbase Auth Token returned using the OAuth flow\nOnly any one of <em>secret</em> or <em>token</em> needs to be present in the request.</li>\n<li><strong>namespace</strong> - The namespace from where the path starts\nE.g. for path <em>user/andy/machod/bhenchod</em>, the namespace would be <em>user</em>.</li>\n<li><strong>key</strong> - The vertex key in the path\nFor the path <em>user/andy/machod/bhenchod</em>, the key would be <em>andy</em>.\nFor <em>user/</em> (only the namespace), it would be <code>undefined</code>.</li>\n<li><strong>obj_path</strong> - The path of the vertex that follows the key\nFor the path <em>user/andy/machod/bhenchod</em>, the obj_path would be <em>machod/bhenchod</em>.\nFor <em>user/andy</em>, it would be <code>undefined</code>.</li>\n<li><strong>filters</strong> - edge filters, applies only when listening for edges on a vertex</li>\n<li><strong>timestamp</strong> - specify milliseconds since epoch, from where to start ‘syncing’ data\nWhen there’s a reconnection with the server, due to network connectivity problems, this handy option allows you to ‘resume’ listening and sync the changes happend after that timestamp</li>\n<li><strong>listener_id</strong> - a unique string that will be used in your application to distuinguish Socket.IO listeners</li>\n</ul>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Request Format"},{"content":"<h3 id=\"socketio-api-endpoints-requesting-for-data-vertex\">Vertex</h3><p>When the path you are pointing to is a vertex, you can listen to:</p><ul>\n<li>Properties of the Vertex. I.e. fetch existing properties of the vertx, and get updates when they change.</li>\n<li>Edges of the Vertex. I.e. fetch existing edges, and get updates when edges are added, removed or replaced.</li>\n</ul><p>Sample request object, pointing to the path: <em>user/andy/bhenchod/machod</em>, for application _chat<em>app</em>.</p><p>To turn on the listening:</p><p>To turn the listening off:</p><p>Turn it on:</p><p>Turn off:</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Vertex"},{"content":"<h3 id=\"socketio-api-endpoints-requesting-for-data-namespace\">Namespace</h3><p>When your path points to a namespace, you can listen to the Vertices in the Namespace. It means that you will be able to fetch existing vertices, and get updates like addition and removal of vertices.</p><p>To listen on the vertices in namespace the namespace <em>user</em>, the sample request would be:</p><p>Turn it on:</p><p>Turn off:</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Namespace"},{"content":"<h2 id=\"socketio-api-endpoints-attachingremoving-data-listeners\">Attaching/Removing Data Listeners</h2><p>Socket.io allows you to attach callbacks to events, and these callbacks are called everytime the event it fired, i.e. when some data is arrived. The data starts arriving on these callbacks once you request for some data as described above, and it stops when you do an ‘off’ request.</p><p>You should <em>always</em> attach the listeners first and then request for data, otherwise you will miss the initial data that arrives.</p><p><code>ioClient.on()</code> is the method we will use to attach listeners.</p><p>It is possible to listen to <em>connection status</em> events as well, as in, when a disconnection or reconnectio happens. See <em>Handling Disconnection and Reconnection</em> in this doc.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"ATTACHING/REMOVING DATA LISTENERS"},{"content":"<h3 id=\"socketio-api-endpoints-attachingremoving-data-listeners-format\">Format</h3><p>We saw that we build a specific <em>requestObject</em> to do a data request. We will use the same object to attach lieteners.</p><p>The event on which we are listening to is just the stringified version of the <em>requestObject</em> we used, while requesting for data. This way you can listen to all the resources on which you request the data.</p><p>Notice that we deleted the <code>timestamp</code> from request object. This is necessary and it is kept that way on purpose. We will see how and why, in <em>Handling Disconnection and Reconnection</em> section of this documentation.</p><p>The following code will remove the callback.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Format"},{"content":"<h2 id=\"socketio-api-endpoints-parsing-the-data\">Parsing the Data</h2><p>The data that arrives on listener callbacks is different for different resources. It is even different for the same resource, when different events happen. Let’s see how the data looks like on all these cases.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"PARSING THE DATA"},{"content":"<h3 id=\"socketio-api-endpoints-parsing-the-data-vertex\">Vertex</h3><p>As we saw earlier, on a vertex you can listen to two kinds of resources: properties and edges.</p><p>Suppose you are listening to the properties of the vertex at <em>user/andy</em>. We will try to understand what are the cases when data will arrive and how it would look like.</p><p>Start listening:</p><p>When you request for data for the first time, all the existing properties are retrieved. The data looks like this:</p><p>Notice that the <code>data.optype</code> of the data is <em>“RETR”</em> - retrieval. You get all the properties inside <code>data.vertex</code>, additionally the timestamp when the vertex was changed and the internal _<em>id</em> of the vertex.</p><p>Whenever a new property is added or an existing property is replaced, the data would be:</p><p>The <code>data.optype</code> is <em>“UPDATE”</em>, and you will get only the changed properties inside <code>data.vertex</code> and the updated timestamp of the vertex.</p><p>A property removal causes arrivel of the following object:</p><p><code>data.optype</code> is <em>“REMOVE”</em> and <code>data.vertex</code> includes empty property <code>cast</code>. It means that the property <code>cast</code> has been removed.</p><p>When you do a <code>ioClient.emit('properties off', requestObj)</code> to turn off the data listening, you receive a string as data. The value of this string is <code>\"STOPPED\"</code>. It simply tells you that the callback will never be called again, unless you request for the data again.</p><p>Whenever an error occurs, the data will be a string, containing the error message.</p><p>Suppose you want to listen to edges of the vertex <em>user/andy</em>. Here’s the code:</p><p>Whenever you listen for edges of a vertex, you first get all the existing edges and later on you keep getting the updates.</p><p>If you apply filters, you only get the edges which match the filters, and you NEVER get any further changes in edges.</p><p><code>data.optype</code> is <em>“RETR”</em>. <code>data.edges</code> are all the existing edges of the vertex. Each edge has a <code>timestamp</code> which describes when the timestamp was last changed, and <code>order</code> is the priority of the edge. <code>t_id</code> of each edge displays the internal id of the vertex it points to.</p><p>The data that arrives is:</p><p><code>data.optype</code> is <em>“UPDATE”</em> and only the edges which are replaced or added, are present here.</p><p><code>data.optype</code> is <em>“REMOVE”</em> and <code>data.edges</code> includes edges which are deleted. Notice that <code>t_id</code> of the edge is empty and now it doesn’t point to any vertex.</p><p>When you do a <code>ioClient.emit('edges off', requestObj)</code> to turn off the data listening, you receive a string as data. The value of this string is <code>\"STOPPED\"</code>. It simply tells you that the callback will never be called again, unless you request for the data again.</p><p>Whenever an error occurs, the data will be a string, containing the error message.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Vertex"},{"content":"<h3 id=\"socketio-api-endpoints-parsing-the-data-namespace\">Namespace</h3><p>Suppose that you are listening on the namespace <em>user</em>, so you build a <em>requestObject</em>, attached a callback and you requested for the data.</p><p>When you listen on a namespace, you first get all the existing vertices, and then as vertices are added or removed, you get the changes.</p><p>Intially, all the vertices are retrieved as an array,</p><p>You do NOT get the properties of the vertices, you just get thier timestaps, internal ids, and root-paths. Using the root-path, you can again listen on their properties if you want.</p><p><code>data.optype</code> is <em>“UPDATE”</em>, and <code>data.vertex</code> is the newly added vertex in the namespace.</p><p><code>data.optype</code> is <em>“REMOVE”</em>, and <code>data.vertex</code> is the vertex which got destroyed.</p>","link":"./v2.0/rest/api-reference.html","spaLink":"#/v2.0/rest/api-reference","title":"Namespace"},{"content":"<h1 id=\"major-changes\">Major changes</h1>","link":"./v3.0/changelog/changelog.html","spaLink":"#/v3.0/changelog/changelog","title":"MAJOR CHANGES"},{"content":"<h3 id=\"major-changes-1-json-document-based-model\">1. JSON Document based Model</h3><p>With v3.0, Appbase adopts the JSON based document schema model (similar to MongoDB and ElasticSearch). We are bringing the simplicity of JSON based data models to Appbase with this major revision while still maintaining index-free adjency references for each document.</p><p>Here’s how the mapping works if you are familiar with the v2.0 API:</p>","link":"./v3.0/changelog/changelog.html","spaLink":"#/v3.0/changelog/changelog","title":"1. JSON Document based Model"},{"content":"<h3 id=\"major-changes-2-rest-api-format\">2. REST API Format</h3><p>The overall API format has been made more expressive.</p><ul>\n<li>Fetching documents and references are now completely supported by <code>GET</code> requests. There are additional filters supported by URL parameters like <strong>streaming queries</strong>, <strong>pagination</strong>, and <strong>timestamp</strong> based retrieval.</li>\n<li><code>PATCH</code> is used for creating and updating resources.</li>\n<li><code>POST</code> is used for all ElasticSearch queries.</li>\n</ul>","link":"./v3.0/changelog/changelog.html","spaLink":"#/v3.0/changelog/changelog","title":"2. REST API Format"},{"content":"<h1 id=\"use-cases\">Use-cases</h1><p>Appbase uses opensource Elasticsearch in the backend, and provides all the powerful search features of ES, on the data stored in Appbase.</p><p>When you want to make some data <em>searchable</em>, you have to enable search on a namespace in the <em>Dashboard</em>. In the <em>Data Browser</em>, enable the search by toggling the <i class=\"fa fa-eye-slash\"></i> switch on the namespace. If search is enabled, you should see this icon <i class=\"fa fa-eye\"></i> next to the namespace. </p><p>Enabling search on a namespace causes all the vertices inside the namespace to be indexed inside Elasticsearch. New vertices created inside this namespace are automatically indexed, and searchable. When the data of a vertex is updated, the indices update automatically and new data is searchable.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"USE-CASES"},{"content":"<h2 id=\"use-cases-elasticsearch-introduction\">Elasticsearch Introduction</h2><p>ElasticSearch is powered by Lucene, a powerful open-source full-text search library, under the hood. More than just full-text queries, ES can be used for numeric range queries, geo spatial queries, aggregation/ordering/grouping search results etc. In addition, we can combine these queries (logical and/or) and search across multiple namespaces and properties. To learn more about Elasticsearch, checkout <a href=\"http://exploringelasticsearch.com/\">this very effective guide</a>.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"ELASTICSEARCH INTRODUCTION"},{"content":"<h2 id=\"use-cases-data-mapping\">Data Mapping</h2><p>As in Appbase has the concepts of Namespaces, Vertices and Properties, Elasticsearch has Types, Documents, and Fields. Let’s see how Appbase data is indexed and how these concepts are mapped.</p><p>In a nutshell, All the <em>vertices</em> of Appbase are stored as <em>documents</em> inside ES, where the <em>namespace</em> of the vertex becomes its <em>type</em>. <em>Properties</em> of the vertex can be accessed and filtered as <em>fields</em> inside ES. </p><p>All the examples in this doc ES concepts (Type, Document and Field), as we will be making direct Elasticsearch DSL query, but the query is explained in context the of data in Appbase, so Appbase concepts (Namespace, Vertex and Property) are used.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"DATA MAPPING"},{"content":"<h2 id=\"use-cases-request-and-response-format\">Request and Response Format</h2><p>To do a raw ES query on the data, Appbase provides a <a href=\"\">REST API endpoint</a> and the Javascript library method <a href=\"\"><code>Appbase.rawSearch()</code></a>. Both of them, accepts similar request Query Object, and gives similar responses. </p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"REQUEST AND RESPONSE FORMAT"},{"content":"<h3 id=\"use-cases-request-and-response-format-request\">Request</h3><p>A typical request object defines:</p><ul>\n<li><strong>namespaces</strong> - <em>array</em> : The namespaces on which the query will run</li>\n<li><strong>body</strong> - <em>object</em> : The Elasticsearch Query DSL body</li>\n</ul><p>Elasticsearch provides rich Query DSL (Domain Specific Language) based on JSON to define queries. Queries involving major usecases are covered in this documentation, but if you want to know more about DSL, goto <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html\">this link</a>.</p><p>This is a sample request Query Object: </p><p>Do not worry about the <code>body</code> of this object for now, we will see how to define it for different use cases in this document.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Request"},{"content":"<h3 id=\"use-cases-request-and-response-format-response\">Response</h3><p>We provide an unaltered DSL Response from ES. A typical response includes:</p><ul>\n<li><strong>took</strong> - <em>number</em> : The time it took for the query to run</li>\n<li><strong>timeout</strong> - <em>boolean</em> : If the was query timed out</li>\n<li><strong>_shards</strong> -  <em>object</em> : Sharding information</li>\n<li><strong>hits</strong> - <em>object</em> : Query results and more<ul>\n<li><strong>total</strong> - <em>number</em>: Number of results</li>\n<li><strong>max_score</strong> - <em>number</em> : The maximum <em>score</em> that matched the query. This score comes into picture when we do a full text query.</li>\n<li><strong>hits</strong> - <em>array</em> : The results that satisfied the query. Each object inside this array is a JSON object representing a <em>vertex</em>,  and has following perperties:<ul>\n<li><strong>_index</strong> - <em>string</em> : Index inside which the object is stored. Appbase stores all the vertices of a single application inside a single index. So this will equal to the name of Appbase application you are using.</li>\n<li><strong>_type</strong> - <em>string</em> : Type of the document. I.E. namespace of the vertex (As explained in the Data Mapping).</li>\n<li><strong>_id</strong> - <em>string</em> : Id of the document inside ES.</li>\n<li><strong>_score</strong> - <em>number</em> : The score by witch the vertex matched the query</li>\n<li><strong>_source</strong> - <em>object</em> : The data inside the document (vertex).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>total</strong> - <em>number</em>: Number of results</li>\n<li><strong>max_score</strong> - <em>number</em> : The maximum <em>score</em> that matched the query. This score comes into picture when we do a full text query.</li>\n<li><strong>hits</strong> - <em>array</em> : The results that satisfied the query. Each object inside this array is a JSON object representing a <em>vertex</em>,  and has following perperties:<ul>\n<li><strong>_index</strong> - <em>string</em> : Index inside which the object is stored. Appbase stores all the vertices of a single application inside a single index. So this will equal to the name of Appbase application you are using.</li>\n<li><strong>_type</strong> - <em>string</em> : Type of the document. I.E. namespace of the vertex (As explained in the Data Mapping).</li>\n<li><strong>_id</strong> - <em>string</em> : Id of the document inside ES.</li>\n<li><strong>_score</strong> - <em>number</em> : The score by witch the vertex matched the query</li>\n<li><strong>_source</strong> - <em>object</em> : The data inside the document (vertex).</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>_index</strong> - <em>string</em> : Index inside which the object is stored. Appbase stores all the vertices of a single application inside a single index. So this will equal to the name of Appbase application you are using.</li>\n<li><strong>_type</strong> - <em>string</em> : Type of the document. I.E. namespace of the vertex (As explained in the Data Mapping).</li>\n<li><strong>_id</strong> - <em>string</em> : Id of the document inside ES.</li>\n<li><strong>_score</strong> - <em>number</em> : The score by witch the vertex matched the query</li>\n<li><strong>_source</strong> - <em>object</em> : The data inside the document (vertex).</li>\n</ul><p><sup>Elasticseach sidenote</sup>\nThe <em>score</em> of a result describes how close it matches the query.</p><p>Example: </p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Response"},{"content":"<h2 id=\"use-cases-searching\">Searching</h2><p>We see one by one, what queries apply in which search use cases, how you can combine them, and harness the full power that Elasticsearch provides. </p><p>In each use case below, it is first described how the data is stored, and what kind of search we are trying to achieve on the data. Let’s start with basic use case.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"SEARCHING"},{"content":"<h3 id=\"use-cases-searching-simple-match\">Simple <em>Match</em></h3><p>This is the most basic use case we can think of, where you want to just find out vertices which contain a certain <em>term</em>, either as a string or a number. </p><p>For example, <em>“give me all the..”</em></p><ul>\n<li>users with first name “Andrew”</li>\n<li>products priced at “$100”</li>\n<li>tweets which say “hello”</li>\n</ul><p>We can use the <em>term filter</em> or <em>term query</em> for such cases.</p><p><sup>Elasticseach sidenote</sup></p><p>A <strong>filter</strong> in Elasticsearch says Yes or No for a document. I.E. If the document should be present in the results, or not. \nA <strong>query</strong> also <em>scores</em> the document (counts the relevance with the desired search term - a heavy operation) and results come sorted according to their score.</p><p>Many filters and queries are similar and can be used interchangeably, but its preferred to use queries only for a full text search based on relevance.</p><p>They can be used together. I.E. Filters are applied first and then on those results, the query is performed calculating the score. They can also be wrapped inside each other. </p><p>Read more about them <a href=\"http://exploringelasticsearch.com/searching_data.html#sec-searching-filtering\">here</a>.</p><p>For all the users with first name as “Andrew”,</p><ul>\n<li>Using the <em>term <strong>filter</strong></em>, the request object would be: </li>\n</ul><ul>\n<li>Using the <em>term <strong>query</strong></em>, the request object would be: </li>\n</ul><p> The <em>term</em> filter can also be used for other datatypes, for e.g:</p><p>Another useful query is a <em>match query</em>. It allows to define a string of terms and it will find the documents which contains any of these terms. The more matching terms a vertex contains, the higher its score and higher it will be in the sorted results.</p><p>The above search request would find tweets which contains terms “hello” or “world” or both. This behavior can be controlled with <code>operator</code>. Its value defaults to “or”, but we can set to “and” as well. </p><p>The above search request would find tweets which contains terms “hello” and “world”, both.</p><p><sup>Elasticseach sidenote</sup></p><p>The equivalent filter for a <em>match query</em> is the <em>terms filter</em>.\nRead more about them: </p><ul>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-match-query.html\"><em>match query</em> documentation</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-terms-filter.html\"><em>terms filter</em> documentation</a></li>\n</ul><p>The _multi_match_ query can search on multiple fields (properties) and returned if <em>any</em> of those properties match <em>any</em> of the terms.</p><p>The below query would search for users with either first name or last name, being “Andrew” or “Garlic”. I.E. also the users with first name as “Garlic” would be included, and vice versa.</p><p>For more fine tuned searches, like on the users with first name as “Andrew” and last name as “Garlic”, we have to combine queries/filters. We see that later in this document.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Simple Match"},{"content":"<h3 id=\"use-cases-searching-fuzzy\">Fuzzy</h3><p>A fuzzy search matches with the documents who have the terms matching <em>nearly</em>  the search term.</p><p>This is very useful for Google-like searches, where there could be some typing mistakes, or the user is not sure what word exactly he is searching for. </p><p>The simplest way to do a <em>fuzzy query</em> is:</p><p>The above query would return tweets with the message as “hella” or “hallo” etc. </p><p><sup>Elasticseach sidenote</sup></p><p>There are number of <em>fuzzy</em> queries in Elasticsearch and a number of ways to control the <em>fuzziness</em> of the term. Plus, you can search on a single or more properties (fields). Take a look at these documentations:</p><ul>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html\"><em>fuzzy</em> query</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-flt-query.html\"><em>fuzzy-like-this</em> query</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html\"><em>more-like-this</em> query</a></li>\n</ul>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Fuzzy"},{"content":"<h3 id=\"use-cases-searching-numeric-range\">Numeric-range</h3><p><em>“Give me all the…”</em></p><ul>\n<li>products priced at less than <em>$100</em>, more than <em>$50</em> </li>\n<li>pages between <em>5</em> and <em>10</em></li>\n</ul><p>We can use the <em>range filter</em>.</p><p><sup>Elasticseach sidenote</sup></p><p>It can also perform greater/less <em>or equal </em> searches. See the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-range-filter.html\"><em>range</em> filter documentation</a> for more details.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Numeric-range"},{"content":"<h3 id=\"use-cases-searching-geo-spatial\">Geo spatial</h3><p>Elasticsearch requires you to store your the geographic location using longitude and latitude, stored as a nested JSON object. Lets say that we are storing restaurants, along with their location. The data of a restaurant would be: </p><p>As long as the location is stored as above inside a vertex, we can do tons of geo spatial queries with Elasticsearch.</p><p>We can use <em>geo distance</em> filter to find vertices located within specific distance from a geo point.</p><p>Find restaurants located within 5km from the point 40, -70.</p><p><sup>Elasticseach sidenote</sup></p><p>You can define the distance in real world Units like km, miles etc. There many ways the shape (box, polygon etc) and the range of this distance can be customized. Check out these documents for more details: </p><ul>\n<li><a href=\"http://www.elasticsearch.org/blog/geo-location-and-search/\">Elasticsearch Geo Location tutorial</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-distance-filter.html\"><em>geo-distance</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-distance-range-filter.html\"><em>geo-distance-range</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-bounding-box-filter.html\"><em>geo-bounding-box</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-polygon-filter.html\"><em>geo-polygon</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-shape-filter.html\"><em>geo-shape</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geohash-cell-filter.html\"><em>geohash-cell</em> filter</a></li>\n</ul>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Geo spatial"},{"content":"<h3 id=\"use-cases-searching-sorting\">Sorting</h3><p>Results are sorted according to their <em>score</em> by default. We can change this behavior by applying <em>sort</em> parameter in the request.</p><p>Earlier in the <em>numeric range</em> use case, we searched for products in price range $50 and $100. Let’s sort the results according to their price, and then name.</p><p><sup>Elasticseach sidenote</sup></p><p>You can specify the order of the sort (asc, desc), you can also sort on multi-valued fields. Geo Location based sort is possible too.\nTake a look at the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-sort.html\"><em>sort</em> documentation</a>.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Sorting"},{"content":"<h3 id=\"use-cases-searching-aggregation\">Aggregation</h3><p>There are types of aggregation supported in Elasticsearch. </p><p>There wide varieties of aggregations and criteria, based on string-terms, locations, dates, numbers, etc. Take a look at the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html\"><em>Aggregation API</em> documentation</a>.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Aggregation"},{"content":"<h3 id=\"use-cases-searching-combining-queriesfilters\">Combining queries/filters</h3><p><em>“Give me all the products which..”</em></p><ul>\n<li>are mobile phones\n<em>and</em></li>\n<li>are priced at lower than $800\n<em>and</em></li>\n<li>do not belong to the brand “Apple”\n<em>and</em></li>\n<li>are either <ul>\n<li>with brand “Samsung” <em>and</em> “white” colored\n<em>or</em></li>\n<li>with brand “Sony” <em>and</em> “black” colored\n<em>or</em></li>\n<li>any brand with “metal” color</li>\n</ul>\n</li>\n</ul><ul>\n<li>with brand “Samsung” <em>and</em> “white” colored\n<em>or</em></li>\n<li>with brand “Sony” <em>and</em> “black” colored\n<em>or</em></li>\n<li>any brand with “metal” color</li>\n</ul><p>Writing these terms into a programming language like Javascript: </p><p>For such a case, Elasticsearch provides <em>bool query</em> or <em>bool filter</em>. In a bool query/filter you define the the other kind of queries/filters which should or must be satisfied or, must not be satisfied.</p><p>A bool query/filter can have three kinds of clauses:</p><ul>\n<li><code>must</code> - all the conditions (query/filter) defined inside this clause must appear in matching documents.</li>\n<li><code>must_not</code> - the conditions must not appear in the matching documents.</li>\n<li><code>should</code> - any one of the conditions must appear in the matching documents.</li>\n</ul><p>Lets write the request to search the mobile phones we described above.</p><p><sup>Elasticseach sidenote</sup></p><p>As you can see in the example here, we have using bool filters. This way you can write really complex search requests. To know more check out:</p><ul>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html\"><em>bool</em> query documentation</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-filter.html\"><em>bool</em> filter documentation</a></li>\n</ul>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"Combining queries/filters"},{"content":"<h2 id=\"use-cases-next-steps\">Next steps</h2><p>This document may only be able to give you a headstart on Elasticsearch, and it is impossible to cover every use case and feature provided by Elasticsearch. </p><p>If you have confusions on any of the use cases covered here, see the additional notes and links provided beside them.</p><p>To understand the Elasticsearch from the basics to advanced level, the book <a href=\"http://exploringelasticsearch.com/\">“Exploring Elasticsearch” by Andrew Cholakian</a>, and <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/index.html\">Elasticsearch: The Definitive Guide</a> are definitely helpful.</p>","link":"./v2.0/search/use-cases.html","spaLink":"#/v2.0/search/use-cases","title":"NEXT STEPS"},{"content":"<h1 id=\"datamodel\">Datamodel</h1>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"DATAMODEL"},{"content":"<h2 id=\"datamodel-data-in-appbase\">Data in Appbase</h2>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"DATA IN APPBASE"},{"content":"<h2 id=\"datamodel-understanding-data\">Understanding Data</h2>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"UNDERSTANDING DATA"},{"content":"<h3 id=\"datamodel-understanding-data-document\">Document</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Document"},{"content":"<h3 id=\"datamodel-understanding-data-collection\">Collection</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Collection"},{"content":"<h3 id=\"datamodel-understanding-data-reference\">Reference</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Reference"},{"content":"<h3 id=\"datamodel-understanding-data-path\">Path</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Path"},{"content":"<h3 id=\"datamodel-understanding-data-url\">URL</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"URL"},{"content":"<h2 id=\"datamodel-saving-data\">Saving Data</h2>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"SAVING DATA"},{"content":"<h3 id=\"datamodel-saving-data-writing-data\">Writing Data</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Writing Data"},{"content":"<h3 id=\"datamodel-saving-data-modifying-data\">Modifying Data</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Modifying Data"},{"content":"<h2 id=\"datamodel-retrieving-data-and-queries\">Retrieving Data and Queries</h2>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"RETRIEVING DATA AND QUERIES"},{"content":"<h3 id=\"datamodel-retrieving-data-and-queries-retrieving-document-properties\">Retrieving Document Properties</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Retrieving Document Properties"},{"content":"<h3 id=\"datamodel-retrieving-data-and-queries-references\">References</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"References"},{"content":"<h3 id=\"datamodel-retrieving-data-and-queries-streaming-vs-retrieval\">Streaming vs Retrieval</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"Streaming vs Retrieval"},{"content":"<h1 id=\"security\">Security</h1>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"SECURITY"},{"content":"<h2 id=\"security-serverside\">Serverside</h2>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"SERVERSIDE"},{"content":"<h3 id=\"security-serverside-app-secret\">App Secret</h3>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"App Secret"},{"content":"<h2 id=\"security-clientside\">Clientside</h2>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"CLIENTSIDE"},{"content":"<h1 id=\"acidity\">ACIDity</h1>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"ACIDITY"},{"content":"<h1 id=\"performance\">Performance</h1>","link":"./v3.0/concepts/datamodel.html","spaLink":"#/v3.0/concepts/datamodel","title":"PERFORMANCE"},{"content":"<h1 id=\"appbasejs\">appbase.js</h1><p>JavaScript Wrapper for Appbase Rest API</p>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"APPBASE.JS"},{"content":"<h2 id=\"appbasejs-1-appbase-global-object\">1. Appbase Global Object</h2><p>The Appbase object is responsible for instantiating Apps.</p>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"1. APPBASE GLOBAL OBJECT"},{"content":"<h3 id=\"appbasejs-1-appbase-global-object-methods\">Methods</h3><p><strong>Appbase.app(appname, secret)</strong><br>Used to create a new instance of a App<br>Parameters:</p>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"Methods"},{"content":"<h2 id=\"appbasejs-2-app-class\">2. App Class</h2><p>The App class has utility methods to manage the App’s collections.</p><p>###Methods<br> <strong>App.search(query)</strong><br>This method searches the App’s collections with the given query.<br><a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-global-search-collections\">View in the REST API Docs</a><br>Parameters:  </p><p> Example</p><p>  <strong>AppTest.listCollections()</strong><br>This method retrieves all the collections of the app.<br><a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-global-list-collections\">View in the REST API Docs</a>  </p><p><strong>AppTest.serverTime()</strong><br>Returns the server timestamp in milliseconds.<br><a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-global-server-time\">View in the REST API Docs</a>  </p><p><strong>AppTest.collection(name)</strong><br>Returns a Collection object for the provided name  </p><p>Parameters:  </p>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"2. APP CLASS"},{"content":"<h2 id=\"appbasejs-3-collection-class\">3. Collection Class</h2><p>Provides an interface to the Appbase’s REST endpoints to manage your collections.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference\">View in the REST API Docs</a></p>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"3. COLLECTION CLASS"},{"content":"<h2 id=\"appbasejs-properties\">Properties</h2>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"PROPERTIES"},{"content":"<h2 id=\"appbasejs-methods\">Methods</h2><p><strong>collection.search(query)</strong>\nSearches the collection’s documents with the provided query.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-collection-search-documents-by-propertyies\">View in the REST API Docs</a><br>Parameters:  </p><p><strong>collection.insert(entry)</strong>\nCreate a new document in the collection\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-properties-create-update-document-properties\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.set(key, entry)</strong>\nCreate or update a new document in the collection, with the provided key as the id of that object.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-properties-create-update-document-properties\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.unset(key, properties)</strong>\nDelete specific (or all) data properties of a document.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-properties-delete-document-properties\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.get(key)</strong>\nRead the existing document properties.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-properties-read-document-properties\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.getAll([filters])</strong>\nList the documents in the collection. Returns an array of documents in the given collection.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-collection-list-all-documents\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.on(key, callback[, errorCallback])</strong>\nListen to changes on the Document with the provided key.</p><p>Parameters:  </p><p><strong>collection.onDocuments(callback[, errorCallback])</strong>\nListen to the creation or changes on any Document in the collection.</p><p>Parameters:  </p><p><strong>collection.onRef(key, callback[, errorCallback])</strong>\nListen to the creation or changes of References on the Document that has the provided key.</p><p>Parameters:  </p><p><strong>collection.setRef(key, ref, path[, priority])</strong>\nListen to the creation or changes of References on the Document that has the provided key.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-references-create-update-document-references\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.getRefs(key[, filters])</strong>\nGet all the References of the Document with the provided key.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-references-read-references\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.unsetRefs(key, references)</strong>\nRemoves the provided References from the Document with the provided key.\n<a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-references-delete-references\">View in the REST API Docs</a></p><p>Parameters:  </p><p><strong>collection.delete(key)</strong>\nRemoves the Document with the provided key from the collection.</p><p>Parameters:  </p>","link":"./v3.0/javascript/api-reference.html","spaLink":"#/v3.0/javascript/api-reference","title":"METHODS"},{"content":"<h1 id=\"introduction\">Introduction</h1><p>The Appbase API is based on REST principles. All operations including creation of new documents and references, fetching document (JSON) and references, deleting a document or a reference as well as searching through documents are RESTful.</p>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"INTRODUCTION"},{"content":"<h3 id=\"introduction-resource-types\">Resource Types</h3><ul>\n<li><code>Collection</code> - A container of JSON documents</li>\n<li><code>Document</code> - A JSON object, can contain embedded documents</li>\n<li><code>Reference</code> - A reference is an alias to another document</li>\n<li><code>Path</code> - A path consists of a document and one or more references</li>\n</ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Resource Types"},{"content":"<h3 id=\"introduction-allowed-http-request-types\">Allowed HTTP Request Types</h3><ul>\n<li><code>PATCH</code> - Partial Updates to an Existing Resource OR Creates a new resource</li>\n<li><code>POST</code> - Querying</li>\n<li><code>GET</code> - Fetches a resource</li>\n<li><code>DELETE</code> - Delete a resource</li>\n</ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Allowed HTTP Request Types"},{"content":"<h3 id=\"introduction-authorization\">Authorization</h3><p>Appbase accepts one of the two methods of authorizations.</p><p>In this document, we will be using the 1. method since it makes authorization distinct from the request data.</p>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Authorization"},{"content":"<h3 id=\"introduction-base-uri\">Base URI</h3><p>Base URI is the fixed URI that is common for all the API request endpoints and is prefix to all the API requests. A base URI has two path variables: <strong>appname</strong> and <strong>api_version</strong>. A typical base URI looks like <a href=\"https://v3.api.appbase.io/&lt;appname&gt;/\">https://v3.api.appbase.io/&lt;appname&gt;/</a>.</p>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Base URI"},{"content":"<h1 id=\"api-reference\">API Reference</h1>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"API REFERENCE"},{"content":"<h2 id=\"api-reference-introduction\">Introduction</h2><p>The Appbase API endpoints are divided between three types of different resources.</p><p>A path consists of a document and one or more references. It’s similar to how symlinks work in *nix filesystems.</p>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"INTRODUCTION"},{"content":"<h2 id=\"api-reference-global\">Global</h2>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"GLOBAL"},{"content":"<h3 id=\"api-reference-global-server-time\">Server Time</h3><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns server timestamp in milliseconds.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns server timestamp in milliseconds.</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Server Time"},{"content":"<h3 id=\"api-reference-global-list-collections\">List collections</h3><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array with collection names.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array with collection names.</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"List collections"},{"content":"<h3 id=\"api-reference-global-search-collections\">Search collections</h3><p>Search documents across one or more collections. <em>Returns</em> a JSON body matching the <strong>ElasticSearch response format</strong>. The matching search results are inside the <code>hits.hits</code> field as an array of documents. For more details, see <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases\">more queries</a> that can be done with this endpoint, including fuzzy search, numeric-range, geospatial and aggregation queries.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>collections</code> - An array of the collection names across which search should be applied.</li>\n        <li><code>body.query</code> - A JSON object representing the search query and the properties to be used for the matching criteria.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of documents which match the search query. Each document is returned as an object with all the <strong>properties</strong> (both matching and non-matching), a server <code>timestamp</code> when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>collections</code> - An array of the collection names across which search should be applied.</li>\n        <li><code>body.query</code> - A JSON object representing the search query and the properties to be used for the matching criteria.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of documents which match the search query. Each document is returned as an object with all the <strong>properties</strong> (both matching and non-matching), a server <code>timestamp</code> when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Search collections"},{"content":"<h2 id=\"api-reference-collection\">Collection</h2>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"COLLECTION"},{"content":"<h3 id=\"api-reference-collection-list-all-documents\">List all documents</h3><p>List the documents in the collection. <em>Returns</em> an array of documents in the given collection.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> identifier can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of documents. Each document is returned as an object with a server <code>_timestamp</code> when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> identifier can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of documents. Each document is returned as an object with a server <code>_timestamp</code> when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"List all documents"},{"content":"<h3 id=\"api-reference-collection-search-documents-by-propertyies\">Search Documents by property(ies)</h3><p>Search documents by one or more document properties. <em>Returns</em> a JSON body matching the <strong>ElasticSearch response format</strong>. The matching search results are inside the <code>hits.hits</code> field as an array of documents. For more details, see other queries that can be done with this <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases\">endpoint</a>, including fuzzy search, numeric-range, geospatial and aggregation queries.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> identifier can contain all ascii characters except for white spaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>query</code> - A JSON object representing the search query and the properties to be used for the matching criteria.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of documents which match the search query. Each document is returned as an object with all the <strong>properties</strong> (both matching and non-matching), a server <code>timestamp</code> when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> identifier can contain all ascii characters except for white spaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><code>query</code> - A JSON object representing the search query and the properties to be used for the matching criteria.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns an array of documents which match the search query. Each document is returned as an object with all the <strong>properties</strong> (both matching and non-matching), a server <code>timestamp</code> when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Search Documents by property(ies)"},{"content":"<h2 id=\"api-reference-document-properties\">Document Properties</h2><p>All data operations on a document happen via <strong>Document Properties</strong> endpoint.</p>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"DOCUMENT PROPERTIES"},{"content":"<h3 id=\"api-reference-document-properties-create-update-document-properties\">Create / Update Document Properties</h3><p>Create a new document with some properties or update the properties of an existing document.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li><code>data</code> - A JSON object representing the properties to be set on the document (can contain nested object, arrays). In case of a conflict (read existing property), the property value will be overwritten.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated properties and values, a server <code>_timestamp</code> when the update happened, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application.</li>\n    </ul><ul>\n        <li><code>data</code> - A JSON object representing the properties to be set on the document (can contain nested object, arrays). In case of a conflict (read existing property), the property value will be overwritten.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated properties and values, a server <code>_timestamp</code> when the update happened, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Create / Update Document Properties"},{"content":"<h3 id=\"api-reference-document-properties-read-document-properties\">Read Document Properties</h3><p>Read the existing document properties.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns a <strong>document</strong> with all the properties, a <code>_timestamp</code> value when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns a <strong>document</strong> with all the properties, a <code>_timestamp</code> value when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Read Document Properties"},{"content":"<h3 id=\"api-reference-document-properties-delete-document-properties\">Delete document properties</h3><p>Delete specific (or all) data properties of a document.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting all properties</b>\n    <ul>\n        <li>A JSON object with the field <code>properties</code> set as the boolean value <strong>true</strong>.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting specific properties</b>\n    <ul>\n        <li>A JSON object with the property <code>properties</code> set as an array of property names to be deleted.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns the <strong>document</strong> object with the deleted properties set to “”, a <code>_timestamp</code> value when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li>A JSON object with the field <code>properties</code> set as the boolean value <strong>true</strong>.</li>\n    </ul><ul>\n        <li>A JSON object with the property <code>properties</code> set as an array of property names to be deleted.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns the <strong>document</strong> object with the deleted properties set to “”, a <code>_timestamp</code> value when the document was last updated, the collection name <code>_collection</code> to which the document belongs and the document key as <code>_id</code> (unique to the collection).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Delete document properties"},{"content":"<h2 id=\"api-reference-document-references\">Document References</h2>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"DOCUMENT REFERENCES"},{"content":"<h3 id=\"api-reference-document-references-create-update-document-references\">Create / Update Document References</h3><p>Create a new reference or update the existing reference(s). A <strong>priority</strong>, which acts as an index can optionally be set on the reference.</p><p><strong>Example Request</strong>  </p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li>A JSON object representing the reference(s) to be created from the document. In case of a conflict (read an existing reference), the original reference will be updated.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated references, a server <code>_timestamp</code> for each reference when the update happened, and a unique identifier for each reference resource <code>t_id</code> (used by the server internally).</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li>A JSON object representing the reference(s) to be created from the document. In case of a conflict (read an existing reference), the original reference will be updated.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns updated references, a server <code>_timestamp</code> for each reference when the update happened, and a unique identifier for each reference resource <code>t_id</code> (used by the server internally).</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Create / Update Document References"},{"content":"<h3 id=\"api-reference-document-references-read-references\">Read References</h3><p>Fetch the document references.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">URL PARAMETERS</span>\n    <ul>\n        <li>URL parameters can be passed to retrieve references by querying on priority. The valid url parameters are startAt, endAt, limit and skip</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns a <strong>references</strong> object with the filtered references as an array, each reference having a <code>_timestamp</code> value when the reference was last updated, a unique identifier of the reference resource <code>t_id</code> (used by the server internally), along with an <code>id</code> identifier of the reference on which this operation is performed.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>URL parameters can be passed to retrieve references by querying on priority. The valid url parameters are startAt, endAt, limit and skip</li>\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns a <strong>references</strong> object with the filtered references as an array, each reference having a <code>_timestamp</code> value when the reference was last updated, a unique identifier of the reference resource <code>t_id</code> (used by the server internally), along with an <code>id</code> identifier of the reference on which this operation is performed.</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Read References"},{"content":"<h3 id=\"api-reference-document-references-delete-references\">Delete References</h3><p>Delete specific (or all) document references.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting all references</b>\n    <ul>\n        <li>A JSON object with the field <code>references</code> set as the boolean value <strong>true</strong>.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span> <b>For deleting specific references</b>\n    <ul>\n        <li>A JSON object with the field <code>references</code> set as an array of reference identifiers to be deleted.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li>A JSON object with the field <code>references</code> set as the boolean value <strong>true</strong>.</li>\n    </ul><ul>\n        <li>A JSON object with the field <code>references</code> set as an array of reference identifiers to be deleted.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"Delete References"},{"content":"<h2 id=\"api-reference-delete-document\">Delete Document</h2><p>Deletes the document (including all properties, references), the document path itself will not resolve after this operation, i.e. a retrieval will result in a <em>101: Resource does not exist</em> error.</p><p><strong>Example Request</strong></p><p><strong>Usage</strong>:</p><ul>\n<li><span class=\"inline-heading\">URL VARIABLES</span>\n    <ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST HEADERS</span>\n    <ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">REQUEST BODY (JSON)</span>\n    <ul>\n        <li>A JSON object with the field <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul>\n</li>\n<li><span class=\"inline-heading\">RESPONSE</span>\n    <ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns the <strong>document</strong> object with the fields “_deleted” set to true, and <code>_timestamp</code> field set for the time of deletion.</li>\n    </ul>\n</li>\n</ul><ul>\n        <li><span class=\"path-var\">appname</span> - application name, as set in the Dashboard.</li>\n        <li><span class=\"path-var\">collection</span> - collection identifier, will create one if it doesn’t exist.</li>\n        <li><span class=\"path-var\">document</span> - document identifier, will create one if it doesn’t exist.</li>\n<code>Note:</code> <em>collection</em> and <em>document</em> identifiers can contain all ascii characters except for whitespaces, ‘/’, ‘:’, and ‘~’.\n    </ul><ul>\n        <li>Appbase-Secret - Application secret key, unique to the application</li>\n    </ul><ul>\n        <li>A JSON object with the field <code>all</code> set as the boolean value <strong>true</strong>.</li>\n    </ul><ul>\n        <li><span class=\"inline-heading\">STATUS</span> - <code>200</code> if success.</li>\n        <li><span class=\"inline-heading\">BODY (JSON)</span> - Returns the <strong>document</strong> object with the fields “_deleted” set to true, and <code>_timestamp</code> field set for the time of deletion.</li>\n    </ul>","link":"./v3.0/rest/api-reference.html","spaLink":"#/v3.0/rest/api-reference","title":"DELETE DOCUMENT"},{"content":"<h1 id=\"searching-for-a-better-search\">Searching for a better Search?</h1><p>Building a good quality full-text search experience for an app is a hard problem if your data resides in traditional RDBMS systems. Even database systems like MongoDB have very nascent support for search, others like DynamoDB offer no support. The hard, real fact is that these systems are not designed with search as a use-case, and one is left with a very rudimentary support like exact search match, or in the worst case scenario, even scanning the DB tables.</p><p>While there are great tools available for search, like Apache Solr and Elasticsearch, they have two big problems:  </p><p>We have thought about the <strong>Search</strong> problem really hard, and have come up with an elegant solution.</p>","link":"./v3.0/search/quick-start.html","spaLink":"#/v3.0/search/quick-start","title":"SEARCHING FOR A BETTER SEARCH?"},{"content":"<h2 id=\"searching-for-a-better-search-our-approach-to-search\">Our Approach to Search</h2><p>Appbase takes the search problem head-on and indexes all the data that is ever stored in Appbase, allowing searching on all the data and relationships. We provide the ability to do the following kind of queries:  </p><p>With <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases#use-cases-searching-aggregation\">Aggregation</a> and <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases#use-cases-searching-combining-queriesfilters\">Combining queries</a>, the possibilities are endless.</p><p>Here’s a primer to leverage these powerful search queries broken into three steps.</p>","link":"./v3.0/search/quick-start.html","spaLink":"#/v3.0/search/quick-start","title":"OUR APPROACH TO SEARCH"},{"content":"<h3 id=\"searching-for-a-better-search-our-approach-to-search-1-create-an-app\">1. Create an App</h3><p>Log into <span class=\"fa fa-external-link\"></span><a href=\"https://appbase.io/developer/\">Appbase Dashboard</a>, and create a new app. Once you create an app with a desired name, you should see an app dialog box appear as below.</p><p><img src=\"https://dl.dropboxusercontent.com/spa/q0230upf0vj6xe0/snvrcs_y.png\" alt=\"App credentials\"><br><strong>Image 1</strong>: App name, stats and credentials</p><p>Click the <img src=\"https://dl.dropboxusercontent.com/spa/q0230upf0vj6xe0/jf22g2ed.png\" alt=\"Icon\"> icon to copy your secret into clipboard.</p><p>We will need the <code>app name</code> and the <code>secret</code> in all our API calls. In this case, these would be <em>my_app9</em> and <em>097b2b28b6a13cf2e53b6cecfec42b86</em>. We <strong>trust you</strong> with our app’s secret!</p>","link":"./v3.0/search/quick-start.html","spaLink":"#/v3.0/search/quick-start","title":"1. Create an App"},{"content":"<h3 id=\"searching-for-a-better-search-our-approach-to-search-2-store-some-data\">2. Store some Data</h3><p>Appbase supports the document data model. You can store JSON objects (known as documents) with Appbase directly (similar to MongoDB documents, or RDBMS records). The documents are stored within a collection. Appbase supports a granular search which typically works on a collection. The search is based on the <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.x/query-dsl.html\">ElasticSearch DSL</a>, and supports the entire query format.</p><p>For brevity, let’s say we are storing user profiles that we would like to later search by different document properties. Here’s how a JSON user object might look:</p><p>To store this data with Appbase, we will make a <em>PATCH</em> request via REST. You can read more about them in our <a href=\"http://docs.appbase.io/#/v3.0/rest/api-reference#api-reference-document-properties-create-update-document-properties\">REST API</a>. Here’s how the request would like in our case:</p><p>When you copy the above code, be sure to replace the <code>Appbase-Secret</code> header and the <code>app name</code> in the URL to match your credentials.</p><p><em>Understanding the Request</em></p><p>To store data, we do a <strong>PATCH</strong> request.</p><ul>\n<li><p>URL: <a href=\"https://v3.api.appbase.io/my_app9/people/laura/~properties\">https://v3.api.appbase.io/my_app9/people/laura/~properties</a>, where</p>\n<ul>\n<li><code>https://v3.api.appbase.io</code> - Appbase REST API base URL prefixed with the API version (<code>v3</code>)</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>people</code> - the collection identifer</li>\n<li><code>laura</code> - the document identifier</li>\n<li><code>~properties</code> - the resource endpoint for the vertex <code>laura</code> to patch (depending on the operation, this could be either <code>~properties</code>, <code>~references</code>, <code>~search</code>, etc.)</li>\n</ul>\n</li>\n<li><p>Headers<br>Headers in this request include the <code>Appbase-Secret</code> value.</p>\n</li>\n</ul><p>URL: <a href=\"https://v3.api.appbase.io/my_app9/people/laura/~properties\">https://v3.api.appbase.io/my_app9/people/laura/~properties</a>, where</p><ul>\n<li><code>https://v3.api.appbase.io</code> - Appbase REST API base URL prefixed with the API version (<code>v3</code>)</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>people</code> - the collection identifer</li>\n<li><code>laura</code> - the document identifier</li>\n<li><code>~properties</code> - the resource endpoint for the vertex <code>laura</code> to patch (depending on the operation, this could be either <code>~properties</code>, <code>~references</code>, <code>~search</code>, etc.)</li>\n</ul><p>Headers<br>Headers in this request include the <code>Appbase-Secret</code> value.</p>","link":"./v3.0/search/quick-start.html","spaLink":"#/v3.0/search/quick-start","title":"2. Store some Data"},{"content":"<h3 id=\"searching-for-a-better-search-our-approach-to-search-3-perform-search-on-data\">3. Perform Search on Data</h3><p>Now that we have successfully stored data, let’s perform a full-text search.</p><p>Let’s search for users whose occupation is being a <em>designer</em>.</p><p>The response that you get from Appbase is an array of JSON objects which match the query criteria.</p><p>Response:</p><p>There you go! Appbase’s search fetches results which are close to the search term, and you get the following object in response.</p><p><em>Understanding the Request</em></p><p>To perform a search, we do a <strong>POST</strong> request.</p><ul>\n<li><p>URL: <a href=\"https://v3.api.appbase.io/my_app9v/people/~search\">https://v3.api.appbase.io/my_app9v/people/~search</a>, where</p>\n<ul>\n<li><code>https://v3.api.appbase.io</code> - Appbase REST API base URL (<code>v3</code> for all API requests)</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>people</code> - the collection identifer</li>\n<li><code>~search</code> - the resource endpoint indicating our query intent (<code>search</code> in this case, and <code>properties</code> in the previous step).</li>\n</ul>\n</li>\n<li><p>Request Headers<br>Headers are always the same for all REST API requests.</p>\n</li>\n<li><p>Request Body<br>The JSON query object that we send with this request:</p>\n<pre><code class=\"lang-json prettyprint prettyprinted\" style=\"\"><span class=\"pun\">{</span><span class=\"pln\">\n  </span><span class=\"string\"><span class=\"str\">\"query\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n          </span><span class=\"string\"><span class=\"str\">\"multi_match\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n              </span><span class=\"string\"><span class=\"str\">\"fields\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"string\"><span class=\"str\">\"occupation\"</span></span><span class=\"pun\">],</span><span class=\"pln\">\n              </span><span class=\"string\"><span class=\"str\">\"query\"</span></span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"string\"><span class=\"str\">\"designer\"</span></span><span class=\"pln\">\n          </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></code></pre>\n<ul>\n<li><code>query</code>: The search query string</li>\n<li><code>fields</code>: The list of fields to match the <strong>query</strong> against.</li>\n</ul>\n</li>\n</ul><p>URL: <a href=\"https://v3.api.appbase.io/my_app9v/people/~search\">https://v3.api.appbase.io/my_app9v/people/~search</a>, where</p><ul>\n<li><code>https://v3.api.appbase.io</code> - Appbase REST API base URL (<code>v3</code> for all API requests)</li>\n<li><code>my_app9</code> - name of your app as shown in the dashboard</li>\n<li><code>people</code> - the collection identifer</li>\n<li><code>~search</code> - the resource endpoint indicating our query intent (<code>search</code> in this case, and <code>properties</code> in the previous step).</li>\n</ul><p>Request Headers<br>Headers are always the same for all REST API requests.</p><p>Request Body<br>The JSON query object that we send with this request:</p><ul>\n<li><code>query</code>: The search query string</li>\n<li><code>fields</code>: The list of fields to match the <strong>query</strong> against.</li>\n</ul><p>That’s it! In less than 10 minutes, we were able to add production grade search in your app.</p>","link":"./v3.0/search/quick-start.html","spaLink":"#/v3.0/search/quick-start","title":"3. Perform Search on Data"},{"content":"<h2 id=\"searching-for-a-better-search-full-text-and-more\">Full text and more</h2><p>Do you want to customize the ‘fuzziness’ of your search? Or perhaps apply multiple queries and filter the data at the same time. If this has whetted your appetite, check out our main article over here. <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases\">Search Usecases</a>.</p>","link":"./v3.0/search/quick-start.html","spaLink":"#/v3.0/search/quick-start","title":"FULL TEXT AND MORE"},{"content":"<h1 id=\"use-cases\">Use-cases</h1><p>Appbase uses Elasticsearch in the backend, and provides all the search queries and filters supported by ES, on the data stored in Appbase. Every data that’s pushed into Appbase is automatically indexed on ElasticSearch.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"USE-CASES"},{"content":"<h2 id=\"use-cases-elasticsearch-introduction\">Elasticsearch Introduction</h2><p>ElasticSearch is powered by Lucene, a powerful open-source full-text search library, under the hood. More than just full-text queries, ES can be used for numeric range queries, geo spatial queries, aggregation/ordering/grouping search results etc. In addition, we can combine these queries (logical and/or) and search across multiple collections and properties. To learn more about Elasticsearch, checkout <a href=\"http://exploringelasticsearch.com/\">this very effective guide</a>.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"ELASTICSEARCH INTRODUCTION"},{"content":"<h2 id=\"use-cases-data-mapping\">Data Mapping</h2><p>As in Appbase has the concepts of collections, Documents and Properties, Elasticsearch has Types, Documents, and Fields. Let’s see how Appbase data is indexed and how these concepts are mapped.</p><p>In a nutshell, All the <em>documents</em> of Appbase are stored as <em>documents</em> inside ES, where the <em>collection</em> of the document becomes its <em>type</em>. <em>Properties</em> of the document can be accessed and filtered as <em>fields</em> inside ES.</p><p>All the examples in this doc ES concepts (Type, Document and Field), as we will be making direct Elasticsearch DSL query, but the query is explained in context the of data in Appbase, so Appbase concepts (collection, document and Property) are used.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"DATA MAPPING"},{"content":"<h2 id=\"use-cases-request-and-response-format\">Request and Response Format</h2><p>Appbase provides two REST API endpoints for performing search.</p><p>The <strong>1.</strong> searches across multiple collections and has an additional field to specify this in the request body. Both endpoints are compatible with <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.x/query-dsl.html\">ElasticSearch Query DSL</a> and return results in the same format.</p><p><code>Roadmap Note</code>:\nWe will be adding a search endpoint at the <strong>document</strong> level that queries on the document and it’s references.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"REQUEST AND RESPONSE FORMAT"},{"content":"<h3 id=\"use-cases-request-and-response-format-request\">Request</h3><p>A typical request object defines:</p><ul>\n<li><strong>collections</strong> - <em>array</em> : The collections on which the query will run</li>\n<li><strong>body</strong> - <em>object</em> : The Elasticsearch Query DSL body</li>\n</ul><p>Elasticsearch provides rich Query DSL (Domain Specific Language) based on JSON to define queries. Queries involving major usecases are covered in this documentation, but if you want to know more about DSL, goto <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html\">this link</a>.</p><p>This is a sample request <strong>query object</strong>, let’s call it <code>body.json</code>:</p><p>Do not worry about the <code>body</code> of this object for now, we will see how to define it for different use cases in this document.</p><p>The entire curl request would look like: </p><p><code>Note:</code>\nThe search endpoint here is not on a particular collection, it is on the app. The collections on which the search should apply are defined in the request body.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Request"},{"content":"<h3 id=\"use-cases-request-and-response-format-response\">Response</h3><p>We provide an unaltered DSL Response from ES. A typical response includes:</p><ul>\n<li><strong>took</strong> - <em>number</em> : The time it took for the query to run</li>\n<li><strong>timeout</strong> - <em>boolean</em> : If the was query timed out</li>\n<li><strong>_shards</strong> -  <em>object</em> : Sharding information</li>\n<li><strong>hits</strong> - <em>object</em> : Query results and more<ul>\n<li><strong>total</strong> - <em>number</em>: Number of results</li>\n<li><strong>max_score</strong> - <em>number</em> : The maximum <em>score</em> that matched the query. This score comes into picture when we do a full text query.</li>\n<li><strong>hits</strong> - <em>array</em> : The results that satisfied the query. Each object inside this array is a JSON object representing a <em>document</em>,  and has following perperties:<ul>\n<li><strong>_index</strong> - <em>string</em> : Index inside which the object is stored. Appbase stores all the documents of a single application inside a single index. So this will equal to the name of Appbase application you are using.</li>\n<li><strong>_type</strong> - <em>string</em> : Type of the document. I.E. collection of the document (As explained in the Data Mapping).</li>\n<li><strong>_id</strong> - <em>string</em> : Id of the document inside ES.</li>\n<li><strong>_score</strong> - <em>number</em> : The score by witch the document matched the query</li>\n<li><strong>_source</strong> - <em>object</em> : The data inside the document (document).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>total</strong> - <em>number</em>: Number of results</li>\n<li><strong>max_score</strong> - <em>number</em> : The maximum <em>score</em> that matched the query. This score comes into picture when we do a full text query.</li>\n<li><strong>hits</strong> - <em>array</em> : The results that satisfied the query. Each object inside this array is a JSON object representing a <em>document</em>,  and has following perperties:<ul>\n<li><strong>_index</strong> - <em>string</em> : Index inside which the object is stored. Appbase stores all the documents of a single application inside a single index. So this will equal to the name of Appbase application you are using.</li>\n<li><strong>_type</strong> - <em>string</em> : Type of the document. I.E. collection of the document (As explained in the Data Mapping).</li>\n<li><strong>_id</strong> - <em>string</em> : Id of the document inside ES.</li>\n<li><strong>_score</strong> - <em>number</em> : The score by witch the document matched the query</li>\n<li><strong>_source</strong> - <em>object</em> : The data inside the document (document).</li>\n</ul>\n</li>\n</ul><ul>\n<li><strong>_index</strong> - <em>string</em> : Index inside which the object is stored. Appbase stores all the documents of a single application inside a single index. So this will equal to the name of Appbase application you are using.</li>\n<li><strong>_type</strong> - <em>string</em> : Type of the document. I.E. collection of the document (As explained in the Data Mapping).</li>\n<li><strong>_id</strong> - <em>string</em> : Id of the document inside ES.</li>\n<li><strong>_score</strong> - <em>number</em> : The score by witch the document matched the query</li>\n<li><strong>_source</strong> - <em>object</em> : The data inside the document (document).</li>\n</ul><p>Elasticseach sidenote:\nThe <em>score</em> of a result describes how close it matches the query.</p><p>Example:</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Response"},{"content":"<h2 id=\"use-cases-searching\">Searching</h2><p>We see one by one, what queries apply in which search use cases, how you can combine them, and harness the full power that Elasticsearch provides.</p><p>In each use case below, it is first described how the data is stored, and what kind of search we are trying to achieve on the data. Let’s start with basic use case.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"SEARCHING"},{"content":"<h3 id=\"use-cases-searching-simple-match-and-fulltext\">Simple <em>Match</em> and Fulltext</h3><p>This is the most basic use case we can think of, where you want to just find out documents which contain a certain <em>term</em>, either as a string or a number.</p><p>For example, <em>“give me all the..”</em></p><ul>\n<li>users with first name “Andrew”</li>\n<li>products priced at “$100”</li>\n<li>tweets which say “hello”</li>\n</ul><p>We can use the <em>term filter</em> or <em>term query</em> for such cases.</p><p>Elasticseach sidenote</p><p>A <strong>filter</strong> in Elasticsearch says Yes or No for a document. I.E. If the document should be present in the results, or not.\nA <strong>query</strong> also <em>scores</em> the document (counts the relevance with the desired search term - a heavy operation) and results come sorted according to their score.</p><p>Many filters and queries are similar and can be used interchangeably, but its preferred to use queries only for a full text search based on relevance.</p><p>They can be used together. I.E. Filters are applied first and then on those results, the query is performed calculating the score. They can also be wrapped inside each other.</p><p>Read more about them <a href=\"http://exploringelasticsearch.com/searching_data.html#sec-searching-filtering\">here</a>.</p><p>For all the users with first name as “Andrew”,</p><ul>\n<li>Using the <em>term <strong>filter</strong></em>, the request object would be:</li>\n</ul><ul>\n<li>Using the <em>term <strong>query</strong></em>, the request object would be:</li>\n</ul><p> The <em>term</em> filter can also be used for other datatypes, for e.g:</p><p>Another useful query is a <em>match query</em>. It allows to define a string of terms and it will find the documents which contains any of these terms. The more matching terms a document contains, the higher its score and higher it will be in the sorted results.</p><p>The above search request would find tweets which contains terms “hello” or “world” or both. This behavior can be controlled with <code>operator</code>. Its value defaults to “or”, but we can set to “and” as well.</p><p>The above search request would find tweets which contains terms “hello” and “world”, both.</p><p>Elasticseach sidenote</p><p>The equivalent filter for a <em>match query</em> is the <em>terms filter</em>.\nRead more about them:</p><ul>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-match-query.html\"><em>match query</em> documentation</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-terms-filter.html\"><em>terms filter</em> documentation</a></li>\n</ul><p>For more fine tuned searches, like on the users with first name as “Andrew” and last name as “Garlic”, we have to combine queries/filters. We see that later in this document.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Simple Match and Fulltext"},{"content":"<h3 id=\"use-cases-searching-fulltext-fuzzy\">Fulltext: Fuzzy</h3><p>A fuzzy search matches with the documents who have the terms matching <em>nearly</em>  the search term.</p><p>This is very useful for Google-like searches, where there could be some typing mistakes, or the user is not sure what word exactly he is searching for.</p><p>The simplest way to do a <em>fuzzy query</em> is:</p><p>The above query would return tweets with the message as “hella” or “hallo” etc.</p><p>Elasticseach sidenote</p><p>There are number of <em>fuzzy</em> queries in Elasticsearch and a number of ways to control the <em>fuzziness</em> of the term. Plus, you can search on a single or more properties (fields). Take a look at these documentations:</p><ul>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html\"><em>fuzzy</em> query</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-flt-query.html\"><em>fuzzy-like-this</em> query</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html\"><em>more-like-this</em> query</a></li>\n</ul>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Fulltext: Fuzzy"},{"content":"<h3 id=\"use-cases-searching-fulltext-autocompletewildcard\">Fulltext Autocomplete/wildcard</h3><p>When you want to search based on few characters (generally a use case in autocomplete search bar), you can use the wildcard search.</p><p>Here’s an example, you will get all the results which has “laur” anywhere in the text.</p><p>Elasticseach sidenote</p><p>You can use either <code>*</code> or <code>?</code> as wildcards. <code>?</code> stands for a single characters, and <code>*</code> stands for any character length. Checkout the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/1.4/query-dsl-wildcard-query.html\">Elasticsearch documentation</a> for more.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Fulltext Autocomplete/wildcard"},{"content":"<h3 id=\"use-cases-searching-fulltext-fuzzy-and-autocomplete\">Fulltext: Fuzzy and Autocomplete</h3><p>Using the <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases#use-cases-searching-combining-queriesfilters\">bool query</a>, which is explained <a href=\"http://docs.appbase.io/#/v3.0/search/use-cases#use-cases-searching-combining-queriesfilters\">later in this document</a>, we can combine above two cases into a single query and improve our search results.</p><p>Example:</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Fulltext: Fuzzy and Autocomplete"},{"content":"<h3 id=\"use-cases-searching-numeric-range\">Numeric-range</h3><p><em>“Give me all the…”</em></p><ul>\n<li>products priced at less than <em>$100</em>, more than <em>$50</em></li>\n<li>pages between <em>5</em> and <em>10</em></li>\n</ul><p>We can use the <em>range filter</em>.</p><p>Elasticseach sidenote</p><p>It can also perform greater/less <em>or equal </em> searches. See the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-range-filter.html\"><em>range</em> filter documentation</a> for more details.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Numeric-range"},{"content":"<h3 id=\"use-cases-searching-geo-spatial\">Geo spatial</h3><p>Elasticsearch requires you to store your the geographic location using longitude and latitude, stored as a nested JSON object. Lets say that we are storing restaurants, along with their location. The data of a restaurant would be:</p><p>As long as the location is stored as above inside a document, we can do tons of geo spatial queries with Elasticsearch.</p><p>We can use <em>geo distance</em> filter to find documents located within specific distance from a geo point.</p><p>Find restaurants located within 5km from the point 40, -70.</p><p>Elasticseach sidenote</p><p>You can define the distance in real world Units like km, miles etc. There many ways the shape (box, polygon etc) and the range of this distance can be customized. Check out these documents for more details:</p><ul>\n<li><a href=\"http://www.elasticsearch.org/blog/geo-location-and-search/\">Elasticsearch Geo Location tutorial</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-distance-filter.html\"><em>geo-distance</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-distance-range-filter.html\"><em>geo-distance-range</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-bounding-box-filter.html\"><em>geo-bounding-box</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-polygon-filter.html\"><em>geo-polygon</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geo-shape-filter.html\"><em>geo-shape</em> filter</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/query-dsl-geohash-cell-filter.html\"><em>geohash-cell</em> filter</a></li>\n</ul>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Geo spatial"},{"content":"<h3 id=\"use-cases-searching-sorting\">Sorting</h3><p>Results are sorted according to their <em>score</em> by default. We can change this behavior by applying <em>sort</em> parameter in the request.</p><p>Earlier in the <em>numeric range</em> use case, we searched for products in price range $50 and $100. Let’s sort the results according to their price, and then name.</p><p>Elasticseach sidenote</p><p>You can specify the order of the sort (asc, desc), you can also sort on multi-valued fields. Geo Location based sort is possible too.\nTake a look at the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-sort.html\"><em>sort</em> documentation</a>.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Sorting"},{"content":"<h3 id=\"use-cases-searching-aggregation\">Aggregation</h3><p>There are types of aggregation supported in Elasticsearch.</p><p>There wide varieties of aggregations and criteria, based on string-terms, locations, dates, numbers, etc. Take a look at the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html\"><em>Aggregation API</em> documentation</a>.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Aggregation"},{"content":"<h3 id=\"use-cases-searching-combining-queriesfilters\">Combining queries/filters</h3><p>Case 1) <em>“Give me all the products which..”</em></p><ul>\n<li>has brand “Apple” OR “Samsung”.</li>\n</ul><p>Case 2)  <em>“Give me all the products which..”</em></p><ul>\n<li>has brand “Apple” AND “Samsung”.</li>\n</ul><p>Case 4) Multiple properties, <em>“Give me all the users which..”</em></p><ul>\n<li>has brand first name “John” OR last name “John”</li>\n</ul><p>Let’s take a very complex case,</p><p>Case 3) <em>“Give me all the products which..”</em></p><ul>\n<li>are mobile phones\n<em>and</em></li>\n<li>are priced at lower than $800\n<em>and</em></li>\n<li>do not belong to the brand “Apple”\n<em>and</em></li>\n<li>are either<ul>\n<li>with brand “Samsung” <em>and</em> “white” colored\n<em>or</em></li>\n<li>with brand “Sony” <em>and</em> “black” colored\n<em>or</em></li>\n<li>any brand with “metal” color</li>\n</ul>\n</li>\n</ul><ul>\n<li>with brand “Samsung” <em>and</em> “white” colored\n<em>or</em></li>\n<li>with brand “Sony” <em>and</em> “black” colored\n<em>or</em></li>\n<li>any brand with “metal” color</li>\n</ul><p>Writing these terms into a programming language like Javascript:</p><p>For such a case, Elasticsearch provides <em>bool query</em> or <em>bool filter</em>. In a bool query/filter you define the the other kind of queries/filters which should or must be satisfied or, must not be satisfied.</p><p>A bool query/filter can have three kinds of clauses:</p><ul>\n<li><code>must</code> - all the conditions (query/filter) defined inside this clause must appear in matching documents.</li>\n<li><code>must_not</code> - the conditions must not appear in the matching documents.</li>\n<li><code>should</code> - any one of the conditions must appear in the matching documents.</li>\n</ul><p>Lets write the request to search the mobile phones we described above.</p><p>Elasticseach sidenote</p><p>As you can see in the example here, we have using bool filters. This way you can combine any kind of queries and filters, you can also combine multiple usecases (like fuzzy and wildcard), and write complex search requests. To know more check out:</p><ul>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html\"><em>bool</em> query documentation</a></li>\n<li><a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-filter.html\"><em>bool</em> filter documentation</a></li>\n</ul>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"Combining queries/filters"},{"content":"<h2 id=\"use-cases-next-steps\">Next steps</h2><p>This document may only be able to give you a headstart on Elasticsearch, and it is impossible to cover every use case and feature provided by Elasticsearch.</p><p>If you have confusions on any of the use cases covered here, see the additional notes and links provided beside them.</p><p>To understand the Elasticsearch from the basics to advanced level, the book <a href=\"http://exploringelasticsearch.com/\">“Exploring Elasticsearch” by Andrew Cholakian</a>, and <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/index.html\">Elasticsearch: The Definitive Guide</a> are definitely helpful.</p>","link":"./v3.0/search/use-cases.html","spaLink":"#/v3.0/search/use-cases","title":"NEXT STEPS"}]